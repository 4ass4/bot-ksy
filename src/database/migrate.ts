import Database from './database.js';
import dotenv from 'dotenv';

dotenv.config();

const DATABASE_PATH = process.env.DATABASE_PATH || './database/bot.db';

async function migrate() {
  const db = new Database(DATABASE_PATH);

  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await db.run(`
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE NOT NULL,
        first_name TEXT NOT NULL,
        last_name TEXT,
        username TEXT,
        is_admin BOOLEAN DEFAULT FALSE,
        joined_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤ (–ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π)
    await db.run(`
      CREATE TABLE IF NOT EXISTS channels (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_channel_id TEXT UNIQUE NOT NULL,
        name TEXT NOT NULL,
        invite_link TEXT NOT NULL
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    await db.run(`
      CREATE TABLE IF NOT EXISTS official_channel (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_channel_id TEXT UNIQUE NOT NULL,
        name TEXT NOT NULL,
        invite_link TEXT NOT NULL,
        description TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    await db.run(`
      CREATE TABLE IF NOT EXISTS raffles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        prize_description TEXT NOT NULL,
        photo_file_id TEXT,
        video_file_id TEXT,
        winners_count INTEGER NOT NULL,
        end_date DATETIME NOT NULL,
        status TEXT CHECK(status IN ('SCHEDULED', 'ACTIVE', 'FINISHED', 'CANCELED')) DEFAULT 'SCHEDULED',
        result_message_id INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–≤—è–∑—É—é—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∏-–∫–∞–Ω–∞–ª—ã
    await db.run(`
      CREATE TABLE IF NOT EXISTS raffle_channels (
        raffle_id INTEGER,
        channel_id INTEGER,
        PRIMARY KEY (raffle_id, channel_id),
        FOREIGN KEY (raffle_id) REFERENCES raffles(id) ON DELETE CASCADE,
        FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE CASCADE
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await db.run(`
      CREATE TABLE IF NOT EXISTS participants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        raffle_id INTEGER,
        is_eligible BOOLEAN DEFAULT FALSE,
        referral_count INTEGER DEFAULT 0,
        participated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, raffle_id),
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (raffle_id) REFERENCES raffles(id) ON DELETE CASCADE
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    await db.run(`
      CREATE TABLE IF NOT EXISTS winners (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        raffle_id INTEGER,
        user_id INTEGER,
        prize_won TEXT,
        won_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (raffle_id) REFERENCES raffles(id) ON DELETE CASCADE,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
    await db.run(`
      CREATE TABLE IF NOT EXISTS mailings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        mailing_type TEXT CHECK(mailing_type IN ('ALL_USERS', 'RAFFLE_PARTICIPANTS')) NOT NULL,
        target_raffle_id INTEGER,
        message_text TEXT NOT NULL,
        photo_file_id TEXT,
        video_file_id TEXT,
        inline_keyboard_json TEXT,
        schedule_time DATETIME,
        status TEXT CHECK(status IN ('SCHEDULED', 'SENDING', 'COMPLETED', 'CANCELED')) DEFAULT 'SCHEDULED',
        sent_count INTEGER DEFAULT 0,
        failed_count INTEGER DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (target_raffle_id) REFERENCES raffles(id) ON DELETE SET NULL
      )
    `);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ–¥–∏–∞ –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    try {
      await db.run(`ALTER TABLE raffles ADD COLUMN photo_file_id TEXT`);
    } catch (error) {
      console.log('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ photo_file_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    try {
      await db.run(`ALTER TABLE raffles ADD COLUMN video_file_id TEXT`);
    } catch (error) {
      console.log('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ video_file_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    try {
      await db.run(`ALTER TABLE raffles ADD COLUMN referral_requirement BOOLEAN DEFAULT FALSE`);
    } catch (error) {
      console.log('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ referral_requirement —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    try {
      await db.run(`ALTER TABLE raffles ADD COLUMN min_referrals INTEGER DEFAULT 0`);
    } catch (error) {
      console.log('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ min_referrals —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    try {
      await db.run(`ALTER TABLE raffles ADD COLUMN max_referrals INTEGER DEFAULT 0`);
    } catch (error) {
      console.log('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ max_referrals —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    try {
      await db.run(`ALTER TABLE raffles ADD COLUMN referral_bonus TEXT`);
    } catch (error) {
      console.log('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ referral_bonus —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    try {
      await db.run(`ALTER TABLE raffles ADD COLUMN bonus_multiplier REAL DEFAULT 1.0`);
    } catch (error) {
      console.log('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ bonus_multiplier —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
    await db.run(`
      CREATE TABLE IF NOT EXISTS bot_settings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        welcome_message TEXT DEFAULT 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!

üéÅ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –∏ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö.',
        cover_photo_file_id TEXT,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
    await db.run(`
      INSERT OR IGNORE INTO bot_settings (id, welcome_message) VALUES (1, 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!

üéÅ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –∏ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö.')
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    await db.run(`
      CREATE TABLE IF NOT EXISTS referrals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        referrer_id INTEGER NOT NULL,
        referred_id INTEGER UNIQUE NOT NULL,
        referral_code TEXT NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        bonus_claimed BOOLEAN DEFAULT FALSE,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (referrer_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (referred_id) REFERENCES users(id) ON DELETE CASCADE
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤
    await db.run(`
      CREATE TABLE IF NOT EXISTS referral_codes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE NOT NULL,
        code TEXT UNIQUE NOT NULL,
        usage_count INTEGER DEFAULT 0,
        max_usage INTEGER DEFAULT 0,
        is_active BOOLEAN DEFAULT TRUE,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await db.run(`
      CREATE TABLE IF NOT EXISTS analytics (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        event_type TEXT NOT NULL,
        user_id INTEGER,
        raffle_id INTEGER,
        channel_id INTEGER,
        referral_code TEXT,
        metadata TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,
        FOREIGN KEY (raffle_id) REFERENCES raffles(id) ON DELETE SET NULL,
        FOREIGN KEY (channel_id) REFERENCES channels(id) ON DELETE SET NULL
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏
    await db.run(`
      CREATE TABLE IF NOT EXISTS social_integrations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        platform TEXT NOT NULL,
        access_token TEXT,
        refresh_token TEXT,
        user_id TEXT,
        is_active BOOLEAN DEFAULT TRUE,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    await db.run(`
      CREATE TABLE IF NOT EXISTS social_accounts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        platform TEXT CHECK(platform IN ('TELEGRAM', 'INSTAGRAM', 'TIKTOK', 'TWITTER', 'FACEBOOK', 'YOUTUBE')) NOT NULL,
        username TEXT NOT NULL,
        display_name TEXT NOT NULL,
        profile_url TEXT NOT NULL,
        follower_count INTEGER,
        is_verified BOOLEAN DEFAULT FALSE,
        is_active BOOLEAN DEFAULT TRUE,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(platform, username)
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Å–µ—Ç—è–º –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
    await db.run(`
      CREATE TABLE IF NOT EXISTS raffle_social_requirements (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        raffle_id INTEGER NOT NULL,
        social_account_id INTEGER NOT NULL,
        requirement_type TEXT CHECK(requirement_type IN ('FOLLOW', 'LIKE', 'SHARE', 'COMMENT')) DEFAULT 'FOLLOW',
        is_required BOOLEAN DEFAULT TRUE,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (raffle_id) REFERENCES raffles(id) ON DELETE CASCADE,
        FOREIGN KEY (social_account_id) REFERENCES social_accounts(id) ON DELETE CASCADE
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç–∏
    await db.run(`
      CREATE TABLE IF NOT EXISTS social_posts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        platform TEXT NOT NULL,
        post_type TEXT NOT NULL,
        content TEXT,
        media_file_id TEXT,
        raffle_id INTEGER,
        status TEXT CHECK(status IN ('DRAFT', 'SCHEDULED', 'PUBLISHED', 'FAILED')) DEFAULT 'DRAFT',
        scheduled_at DATETIME,
        published_at DATETIME,
        external_post_id TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (raffle_id) REFERENCES raffles(id) ON DELETE SET NULL
      )
    `);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É referral_count –≤ —Ç–∞–±–ª–∏—Ü—É participants (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
    try {
      await db.run(`ALTER TABLE participants ADD COLUMN referral_count INTEGER DEFAULT 0`);
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ referral_count –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É participants');
    } catch (error: any) {
      if (error.message.includes('duplicate column name')) {
        console.log('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ referral_count —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        console.log('‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ referral_count —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    await db.run(`CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_participants_raffle_id ON participants(raffle_id)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_participants_user_id ON participants(user_id)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_participants_referral_count ON participants(referral_count)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_raffles_status ON raffles(status)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_raffles_end_date ON raffles(end_date)`);
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    await db.run(`CREATE INDEX IF NOT EXISTS idx_referrals_referrer_id ON referrals(referrer_id)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_referrals_referred_id ON referrals(referred_id)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_referral_codes_code ON referral_codes(code)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_referral_codes_user_id ON referral_codes(user_id)`);
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await db.run(`CREATE INDEX IF NOT EXISTS idx_analytics_event_type ON analytics(event_type)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_analytics_created_at ON analytics(created_at)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_analytics_user_id ON analytics(user_id)`);
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π
    await db.run(`CREATE INDEX IF NOT EXISTS idx_social_posts_platform ON social_posts(platform)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_social_posts_status ON social_posts(status)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_social_posts_scheduled_at ON social_posts(scheduled_at)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_social_accounts_platform ON social_accounts(platform)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_social_accounts_username ON social_accounts(username)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_raffle_social_requirements_raffle_id ON raffle_social_requirements(raffle_id)`);
    await db.run(`CREATE INDEX IF NOT EXISTS idx_raffle_social_requirements_social_account_id ON raffle_social_requirements(social_account_id)`);

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    throw error;
  } finally {
    await db.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  migrate().catch(console.error);
}

export default migrate;