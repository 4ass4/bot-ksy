import { RaffleStatus } from '../types/index.js';
export class RaffleService {
    db;
    constructor(db) {
        this.db = db;
    }
    async createRaffle(prizeDescription, winnersCount, endDate, channelIds, photoFileId, videoFileId, referralRequirement = false, minReferrals = 0, maxReferrals = 0, referralBonus, bonusMultiplier = 1.0) {
        const result = await this.db.run('INSERT INTO raffles (prize_description, photo_file_id, video_file_id, winners_count, end_date, status, referral_requirement, min_referrals, max_referrals, referral_bonus, bonus_multiplier) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [prizeDescription, photoFileId || null, videoFileId || null, winnersCount, endDate.toISOString(), RaffleStatus.ACTIVE, referralRequirement, minReferrals, maxReferrals, referralBonus || null, bonusMultiplier]);
        const raffleId = result.lastID;
        // –°–≤—è–∑—ã–≤–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à —Å –∫–∞–Ω–∞–ª–∞–º–∏
        for (const channelId of channelIds) {
            await this.db.run('INSERT INTO raffle_channels (raffle_id, channel_id) VALUES (?, ?)', [raffleId, channelId]);
        }
        return {
            id: raffleId,
            prize_description: prizeDescription,
            photo_file_id: photoFileId,
            video_file_id: videoFileId,
            winners_count: winnersCount,
            end_date: endDate,
            status: RaffleStatus.ACTIVE,
            referral_requirement: referralRequirement,
            min_referrals: minReferrals,
            max_referrals: maxReferrals,
            referral_bonus: referralBonus,
            bonus_multiplier: bonusMultiplier,
            created_at: new Date()
        };
    }
    async getRaffleById(id) {
        const raffle = await this.db.get('SELECT * FROM raffles WHERE id = ?', [id]);
        if (!raffle)
            return undefined;
        return {
            ...raffle,
            end_date: new Date(raffle.end_date),
            created_at: new Date(raffle.created_at)
        };
    }
    async getAllRaffles() {
        const raffles = await this.db.all('SELECT * FROM raffles ORDER BY created_at DESC');
        return raffles.map(raffle => ({
            ...raffle,
            end_date: new Date(raffle.end_date),
            created_at: new Date(raffle.created_at)
        }));
    }
    async getRafflesByStatus(status) {
        const raffles = await this.db.all('SELECT * FROM raffles WHERE status = ? ORDER BY created_at DESC', [status]);
        return raffles.map(raffle => ({
            ...raffle,
            end_date: new Date(raffle.end_date),
            created_at: new Date(raffle.created_at)
        }));
    }
    async getActiveRaffles() {
        return this.getRafflesByStatus(RaffleStatus.ACTIVE);
    }
    async updateRaffleStatus(id, status) {
        await this.db.run('UPDATE raffles SET status = ? WHERE id = ?', [status, id]);
    }
    async addParticipant(userId, raffleId, isEligible) {
        console.log(`üìù –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞: userId=${userId}, raffleId=${raffleId}, isEligible=${isEligible}`);
        await this.db.run('INSERT OR REPLACE INTO participants (user_id, raffle_id, is_eligible) VALUES (?, ?, ?)', [userId, raffleId, isEligible]);
        console.log(`‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
    }
    async getParticipantsByRaffleId(raffleId) {
        const participants = await this.db.all('SELECT * FROM participants WHERE raffle_id = ?', [raffleId]);
        return participants.map(p => ({
            ...p,
            participated_at: new Date(p.participated_at)
        }));
    }
    async getEligibleParticipants(raffleId) {
        const participants = await this.db.all('SELECT * FROM participants WHERE raffle_id = ? AND is_eligible = TRUE', [raffleId]);
        return participants.map(p => ({
            ...p,
            participated_at: new Date(p.participated_at)
        }));
    }
    async addWinner(raffleId, userId, prizeWon) {
        await this.db.run('INSERT INTO winners (raffle_id, user_id, prize_won) VALUES (?, ?, ?)', [raffleId, userId, prizeWon]);
    }
    async getWinnersByRaffleId(raffleId) {
        const winners = await this.db.all('SELECT * FROM winners WHERE raffle_id = ?', [raffleId]);
        return winners.map(w => ({
            ...w,
            won_at: new Date(w.won_at)
        }));
    }
    async getExpiredRaffles() {
        const now = new Date().toISOString();
        const raffles = await this.db.all('SELECT * FROM raffles WHERE status = ? AND end_date <= ?', [RaffleStatus.ACTIVE, now]);
        return raffles.map(raffle => ({
            ...raffle,
            end_date: new Date(raffle.end_date),
            created_at: new Date(raffle.created_at)
        }));
    }
    async getUserParticipatedRaffles(userId) {
        console.log(`üîç –ò—â–µ–º —É—á–∞—Å—Ç–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è userId=${userId}`);
        const raffles = await this.db.all(`SELECT r.* FROM raffles r 
       JOIN participants p ON r.id = p.raffle_id 
       WHERE p.user_id = ? AND p.is_eligible = 1
       ORDER BY r.created_at DESC`, [userId]);
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${raffles.length} —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return raffles.map(raffle => ({
            ...raffle,
            end_date: new Date(raffle.end_date),
            created_at: new Date(raffle.created_at)
        }));
    }
    async isUserParticipating(userId, raffleId) {
        const participant = await this.db.get('SELECT * FROM participants WHERE user_id = ? AND raffle_id = ? AND is_eligible = 1', [userId, raffleId]);
        return !!participant;
    }
    async getRaffleWithChannels(raffleId) {
        const raffle = await this.getRaffleById(raffleId);
        if (!raffle)
            return undefined;
        const channels = await this.db.all(`SELECT c.* FROM channels c 
       JOIN raffle_channels rc ON c.id = rc.channel_id 
       WHERE rc.raffle_id = ?`, [raffleId]);
        return { raffle, channels };
    }
    async getActiveRafflesWithChannels() {
        const raffles = await this.getRafflesByStatus(RaffleStatus.ACTIVE);
        const result = [];
        for (const raffle of raffles) {
            const channels = await this.db.all(`SELECT c.* FROM channels c 
         JOIN raffle_channels rc ON c.id = rc.channel_id 
         WHERE rc.raffle_id = ?`, [raffle.id]);
            result.push({ raffle, channels });
        }
        return result;
    }
    async addChannelToRaffle(raffleId, channelId) {
        await this.db.run('INSERT OR IGNORE INTO raffle_channels (raffle_id, channel_id) VALUES (?, ?)', [raffleId, channelId]);
    }
    async removeChannelFromRaffle(raffleId, channelId) {
        await this.db.run('DELETE FROM raffle_channels WHERE raffle_id = ? AND channel_id = ?', [raffleId, channelId]);
    }
    async deleteRaffle(id) {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        await this.db.run('DELETE FROM raffle_channels WHERE raffle_id = ?', [id]);
        await this.db.run('DELETE FROM participants WHERE raffle_id = ?', [id]);
        await this.db.run('DELETE FROM winners WHERE raffle_id = ?', [id]);
        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à
        await this.db.run('DELETE FROM raffles WHERE id = ?', [id]);
    }
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    async checkUserReferralRequirements(userId, raffleId) {
        const raffle = await this.getRaffleById(raffleId);
        if (!raffle || !raffle.referral_requirement) {
            return {
                hasEnoughReferrals: true,
                currentReferrals: 0,
                requiredReferrals: 0,
                maxReferrals: 0
            };
        }
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userReferrals = await this.db.get('SELECT COUNT(*) as count FROM referrals WHERE referrer_id = ? AND is_active = TRUE', [userId]);
        const currentReferrals = userReferrals?.count || 0;
        const hasEnoughReferrals = currentReferrals >= raffle.min_referrals;
        return {
            hasEnoughReferrals,
            currentReferrals,
            requiredReferrals: raffle.min_referrals,
            maxReferrals: raffle.max_referrals
        };
    }
    // –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è —à–∞–Ω—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    calculateBonusMultiplier(referralCount) {
        if (referralCount >= 4)
            return 2.0; // +100% —à–∞–Ω—Å–æ–≤
        if (referralCount >= 3)
            return 1.75; // +75% —à–∞–Ω—Å–æ–≤
        if (referralCount >= 2)
            return 1.5; // +50% —à–∞–Ω—Å–æ–≤
        if (referralCount >= 1)
            return 1.25; // +25% —à–∞–Ω—Å–æ–≤
        return 1.0; // –ë–∞–∑–æ–≤—ã–µ —à–∞–Ω—Å—ã
    }
    async getRaffleRequirements(raffleId) {
        const raffle = await this.getRaffleById(raffleId);
        if (!raffle) {
            throw new Error('–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        const channels = await this.db.all('SELECT c.* FROM channels c JOIN raffle_channels rc ON c.id = rc.channel_id WHERE rc.raffle_id = ?', [raffleId]);
        return {
            hasReferralRequirement: raffle.referral_requirement,
            minReferrals: raffle.min_referrals,
            maxReferrals: raffle.max_referrals,
            referralBonus: raffle.referral_bonus,
            channels
        };
    }
}
//# sourceMappingURL=raffleService.js.map