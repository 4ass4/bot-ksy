export class SocialAccountService {
    db;
    constructor(db) {
        this.db = db;
    }
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    async createSocialAccount(platform, username, displayName, profileUrl, followerCount, isVerified = false) {
        const result = await this.db.run('INSERT INTO social_accounts (platform, username, display_name, profile_url, follower_count, is_verified) VALUES (?, ?, ?, ?, ?, ?)', [platform, username, displayName, profileUrl, followerCount, isVerified]);
        return {
            id: result.lastID,
            platform,
            username,
            display_name: displayName,
            profile_url: profileUrl,
            follower_count: followerCount,
            is_verified: isVerified,
            is_active: true,
            created_at: new Date(),
            updated_at: new Date()
        };
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ ID
    async getSocialAccountById(id) {
        const result = await this.db.get('SELECT * FROM social_accounts WHERE id = ?', [id]);
        if (!result)
            return null;
        return {
            ...result,
            created_at: new Date(result.created_at),
            updated_at: new Date(result.updated_at)
        };
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ username
    async getSocialAccountByUsername(platform, username) {
        const result = await this.db.get('SELECT * FROM social_accounts WHERE platform = ? AND username = ?', [platform, username]);
        if (!result)
            return null;
        return {
            ...result,
            created_at: new Date(result.created_at),
            updated_at: new Date(result.updated_at)
        };
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    async getAllSocialAccounts() {
        const results = await this.db.all('SELECT * FROM social_accounts WHERE is_active = 1 ORDER BY platform, username');
        return results.map(result => ({
            ...result,
            created_at: new Date(result.created_at),
            updated_at: new Date(result.updated_at)
        }));
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    async getSocialAccountsByPlatform(platform) {
        const results = await this.db.all('SELECT * FROM social_accounts WHERE platform = ? AND is_active = 1 ORDER BY username', [platform]);
        return results.map(result => ({
            ...result,
            created_at: new Date(result.created_at),
            updated_at: new Date(result.updated_at)
        }));
    }
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    async updateSocialAccount(id, updates) {
        const fields = Object.keys(updates).map(key => `${key} = ?`).join(', ');
        const values = Object.values(updates);
        values.push(new Date().toISOString()); // updated_at
        values.push(id);
        await this.db.run(`UPDATE social_accounts SET ${fields}, updated_at = ? WHERE id = ?`, values);
    }
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
    async deleteSocialAccount(id) {
        await this.db.run('UPDATE social_accounts SET is_active = 0 WHERE id = ?', [id]);
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    async addSocialRequirementToRaffle(raffleId, socialAccountId, requirementType = 'FOLLOW') {
        const result = await this.db.run('INSERT INTO raffle_social_requirements (raffle_id, social_account_id, requirement_type) VALUES (?, ?, ?)', [raffleId, socialAccountId, requirementType]);
        return {
            id: result.lastID,
            raffle_id: raffleId,
            social_account_id: socialAccountId,
            requirement_type: requirementType,
            is_required: true,
            created_at: new Date()
        };
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Å–µ—Ç—è–º –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    async getSocialRequirementsForRaffle(raffleId) {
        const results = await this.db.all(`
      SELECT rsr.*, sa.*
      FROM raffle_social_requirements rsr
      JOIN social_accounts sa ON rsr.social_account_id = sa.id
      WHERE rsr.raffle_id = ? AND sa.is_active = 1
      ORDER BY sa.platform, sa.username
    `, [raffleId]);
        return results.map(result => ({
            id: result.id,
            raffle_id: result.raffle_id,
            social_account_id: result.social_account_id,
            requirement_type: result.requirement_type,
            is_required: result.is_required,
            created_at: new Date(result.created_at),
            social_account: {
                id: result.social_account_id,
                platform: result.platform,
                username: result.username,
                display_name: result.display_name,
                profile_url: result.profile_url,
                follower_count: result.follower_count,
                is_verified: result.is_verified,
                is_active: result.is_active,
                created_at: new Date(result.created_at),
                updated_at: new Date(result.updated_at)
            }
        }));
    }
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    async removeSocialRequirementFromRaffle(raffleId, socialAccountId) {
        await this.db.run('DELETE FROM raffle_social_requirements WHERE raffle_id = ? AND social_account_id = ?', [raffleId, socialAccountId]);
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å API)
    async checkSocialSubscription(platform, username, userTelegramId) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ API —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${platform} @${username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userTelegramId}`);
        return true;
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º
    async getSocialAccountsStats() {
        const totalAccounts = await this.db.get('SELECT COUNT(*) as count FROM social_accounts WHERE is_active = 1');
        const accountsByPlatform = await this.db.all(`
      SELECT platform, COUNT(*) as count 
      FROM social_accounts 
      WHERE is_active = 1 
      GROUP BY platform
    `);
        const totalFollowers = await this.db.get('SELECT SUM(follower_count) as total FROM social_accounts WHERE is_active = 1 AND follower_count IS NOT NULL');
        const verifiedAccounts = await this.db.get('SELECT COUNT(*) as count FROM social_accounts WHERE is_active = 1 AND is_verified = 1');
        return {
            totalAccounts: totalAccounts?.count || 0,
            accountsByPlatform: accountsByPlatform || [],
            totalFollowers: totalFollowers?.total || 0,
            verifiedAccounts: verifiedAccounts?.count || 0
        };
    }
}
//# sourceMappingURL=socialAccountService.js.map