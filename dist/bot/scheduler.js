import cron from 'node-cron';
import { RaffleStatus, MailingStatus, MailingType } from '../types/index.js';
export class Scheduler {
    bot;
    raffleService;
    userService;
    mailingService;
    referralService;
    constructor(bot, raffleService, userService, mailingService, referralService) {
        this.bot = bot;
        this.raffleService = raffleService;
        this.userService = userService;
        this.mailingService = mailingService;
        this.referralService = referralService;
    }
    start() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        cron.schedule('* * * * *', async () => {
            await this.checkExpiredRaffles();
        });
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        cron.schedule('* * * * *', async () => {
            await this.checkScheduledMailings();
        });
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        cron.schedule('*/10 * * * * *', async () => {
            await this.checkSendingMailings();
        });
        console.log('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω');
    }
    async checkExpiredRaffles() {
        try {
            const expiredRaffles = await this.raffleService.getExpiredRaffles();
            for (const raffle of expiredRaffles) {
                await this.finishRaffle(raffle.id);
            }
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö—Å—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
        }
    }
    async finishRaffle(raffleId) {
        try {
            console.log(`üéÅ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à #${raffleId}`);
            const raffle = await this.raffleService.getRaffleById(raffleId);
            if (!raffle)
                return;
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            const eligibleParticipants = await this.raffleService.getEligibleParticipants(raffleId);
            if (eligibleParticipants.length === 0) {
                console.log(`‚ùå –í —Ä–æ–∑—ã–≥—Ä—ã—à–µ #${raffleId} –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
                await this.raffleService.updateRaffleStatus(raffleId, RaffleStatus.FINISHED);
                return;
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
            for (const participant of eligibleParticipants) {
                await this.referralService.updateParticipantReferralCount(participant.user_id, raffleId);
            }
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
            const updatedParticipants = await this.raffleService.getEligibleParticipants(raffleId);
            // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
            const winnersCount = Math.min(raffle.winners_count, updatedParticipants.length);
            const winners = this.raffleService.selectWinnersWithWeights(updatedParticipants, winnersCount);
            console.log(`üéØ –í—ã–±—Ä–∞–Ω–æ ${winners.length} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–∑ ${updatedParticipants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ª–æ–≥–æ–≤
            const referralStats = await this.referralService.getRaffleReferralStats(raffleId);
            console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.participantsWithReferrals}/${referralStats.totalParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏, —Å—Ä–µ–¥–Ω–µ–µ: ${referralStats.averageReferrals.toFixed(2)}`);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑—É
            for (const winner of winners) {
                await this.raffleService.addWinner(raffleId, winner.user_id);
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            await this.raffleService.updateRaffleStatus(raffleId, RaffleStatus.FINISHED);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
            await this.sendRaffleResults(raffle, winners);
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ª–∏—á–Ω–æ
            await this.notifyWinners(raffle, winners);
            console.log(`‚úÖ –†–æ–∑—ã–≥—Ä—ã—à #${raffleId} –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã–±—Ä–∞–Ω–æ ${winners.length} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π`);
        }
        catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #${raffleId}:`, error);
        }
    }
    async sendRaffleResults(raffle, winners) {
        try {
            const resultsChannelId = process.env.RESULTS_CHANNEL_ID;
            if (!resultsChannelId)
                return;
            let resultText = `üéâ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞*\n\n`;
            resultText += `üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}\n\n`;
            if (winners.length === 0) {
                resultText += `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –≤—Å–µ —É—Å–ª–æ–≤–∏—è.`;
            }
            else {
                resultText += `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n\n`;
                for (let i = 0; i < winners.length; i++) {
                    const winner = winners[i];
                    const user = await this.userService.getUserByTelegramId(winner.user_id);
                    if (user) {
                        const userMention = user.username ? `@${user.username}` : user.first_name;
                        resultText += `${i + 1}. ${userMention}\n`;
                    }
                }
                resultText += `\nüéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!`;
            }
            await this.bot.api.sendMessage(resultsChannelId, resultText, {
                parse_mode: 'Markdown'
            });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
        }
    }
    async notifyWinners(raffle, winners) {
        for (const winner of winners) {
            try {
                const user = await this.userService.getUserByTelegramId(winner.user_id);
                if (!user)
                    continue;
                const message = `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*

–í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!

üéÅ *–ü—Ä–∏–∑:* ${raffle.prize_description}

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.

–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üéä`;
                await this.bot.api.sendMessage(user.telegram_id, message, {
                    parse_mode: 'Markdown'
                });
            }
            catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è ${winner.user_id}:`, error);
            }
        }
    }
    async checkScheduledMailings() {
        try {
            const scheduledMailings = await this.mailingService.getScheduledMailings();
            for (const mailing of scheduledMailings) {
                await this.executeMailing(mailing.id);
            }
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫:', error);
        }
    }
    async checkSendingMailings() {
        try {
            const sendingMailings = await this.mailingService.getSendingMailings();
            for (const mailing of sendingMailings) {
                await this.executeMailing(mailing.id);
            }
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        }
    }
    async executeMailing(mailingId) {
        try {
            console.log(`üì¢ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É #${mailingId}`);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è"
            await this.mailingService.updateMailingStatus(mailingId, MailingStatus.SENDING);
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
            const mailings = await this.mailingService.getAllMailings();
            const mailing = mailings.find(m => m.id === mailingId);
            if (!mailing) {
                console.error(`–†–∞—Å—Å—ã–ª–∫–∞ #${mailingId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return;
            }
            let users = [];
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
            if (mailing.mailing_type === MailingType.ALL_USERS) {
                // –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                users = await this.userService.getAllUsers();
                console.log(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (${users.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)`);
            }
            else if (mailing.mailing_type === MailingType.RAFFLE_PARTICIPANTS && mailing.target_raffle_id) {
                // –£—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
                const participants = await this.raffleService.getEligibleParticipants(mailing.target_raffle_id);
                users = await Promise.all(participants.map(async (participant) => {
                    return await this.userService.getUserByTelegramId(participant.user_id);
                }));
                users = users.filter(user => user !== null);
                console.log(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #${mailing.target_raffle_id} (${users.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)`);
            }
            else {
                console.error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: ${mailing.mailing_type}`);
                return;
            }
            let sentCount = 0;
            let failedCount = 0;
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for (const user of users) {
                try {
                    if (mailing.photo_file_id) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
                        await this.bot.api.sendPhoto(user.telegram_id, mailing.photo_file_id, {
                            caption: mailing.message_text,
                            parse_mode: 'Markdown'
                        });
                    }
                    else if (mailing.video_file_id) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º
                        await this.bot.api.sendVideo(user.telegram_id, mailing.video_file_id, {
                            caption: mailing.message_text,
                            parse_mode: 'Markdown'
                        });
                    }
                    else {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        await this.bot.api.sendMessage(user.telegram_id, mailing.message_text, {
                            parse_mode: 'Markdown'
                        });
                    }
                    sentCount++;
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
                catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, error);
                    failedCount++;
                }
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await this.mailingService.updateMailingStats(mailingId, sentCount, failedCount);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            await this.mailingService.updateMailingStatus(mailingId, MailingStatus.COMPLETED);
            console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ #${mailingId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}, –û—à–∏–±–æ–∫: ${failedCount}`);
        }
        catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ #${mailingId}:`, error);
        }
    }
}
//# sourceMappingURL=scheduler.js.map