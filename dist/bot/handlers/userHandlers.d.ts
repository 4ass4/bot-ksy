import { Bot, Context } from 'grammy';
import { UserService } from '../../services/userService.js';
import { RaffleService } from '../../services/raffleService.js';
import { ChannelService } from '../../services/channelService.js';
import { MailingService } from '../../services/mailingService.js';
import { OfficialChannelService } from '../../services/officialChannelService.js';
import { BotSettingsService } from '../../services/botSettingsService.js';
import { ReferralService } from '../../services/referralService.js';
import { AnalyticsService } from '../../services/analyticsService.js';
import { SocialService } from '../../services/socialService.js';
import { SocialAccountService } from '../../services/socialAccountService.js';
import { MailingType } from '../../types/index.js';
export declare class UnifiedHandlers {
    private bot;
    private userService;
    private raffleService;
    private channelService;
    private mailingService;
    private officialChannelService;
    private botSettingsService;
    private referralService;
    private analyticsService;
    private socialService;
    private socialAccountService;
    private adminStates;
    private adminIds;
    private sendMessage;
    constructor(bot: Bot, userService: UserService, raffleService: RaffleService, channelService: ChannelService, mailingService: MailingService, officialChannelService: OfficialChannelService, botSettingsService: BotSettingsService, referralService: ReferralService, analyticsService: AnalyticsService, socialService: SocialService, socialAccountService: SocialAccountService);
    register(): void;
    handleCallback(ctx: Context, data: string): Promise<void>;
    handleUserCallback(ctx: Context, data: string): Promise<void>;
    handleAdminCallback(ctx: Context, data: string): Promise<void>;
    handleAdminText(ctx: Context, text: string): Promise<void>;
    handleAdminMedia(ctx: Context): Promise<void>;
    showAdminMain(ctx: Context): Promise<void>;
    showAdminRaffles(ctx: Context): Promise<void>;
    showAdminChannels(ctx: Context): Promise<void>;
    showAdminMailings(ctx: Context): Promise<void>;
    showAdminStats(ctx: Context): Promise<void>;
    showBotSettings(ctx: Context): Promise<void>;
    startCreateRaffle(ctx: Context): Promise<void>;
    handleCreateRaffleTitle(ctx: Context, text: string): Promise<void>;
    handleCreateRafflePrize(ctx: Context, text: string): Promise<void>;
    handleCreateRaffleWinners(ctx: Context, text: string): Promise<void>;
    handleCreateRaffleDuration(ctx: Context, text: string): Promise<void>;
    handleAddRafflePhoto(ctx: Context): Promise<void>;
    handleAddRaffleVideo(ctx: Context): Promise<void>;
    handleSkipRaffleMedia(ctx: Context): Promise<void>;
    handleRafflePhoto(ctx: Context): Promise<void>;
    handleRaffleVideo(ctx: Context): Promise<void>;
    showChannelSelection(ctx: Context): Promise<void>;
    updateChannelSelectionMessage(ctx: Context): Promise<void>;
    handleSelectChannel(ctx: Context, channelId: number): Promise<void>;
    handleSelectSocialAccount(ctx: Context, socialAccountId: number): Promise<void>;
    handleCreateRaffleFinal(ctx: Context): Promise<void>;
    cancelAdminAction(ctx: Context): Promise<void>;
    showActiveRafflesAdmin(ctx: Context): Promise<void>;
    showChannelsList(ctx: Context): Promise<void>;
    startAddChannel(ctx: Context): Promise<void>;
    handleAddChannel(ctx: Context, text: string): Promise<void>;
    startEditRaffle(ctx: Context, raffleId: number): Promise<void>;
    publishRaffle(ctx: Context, raffleId: number): Promise<void>;
    startCreateMailing(ctx: Context): Promise<void>;
    handleSelectMailingType(ctx: Context, mailingType: MailingType): Promise<void>;
    handleCreateMailingText(ctx: Context, text: string): Promise<void>;
    handleSelectMailingSchedule(ctx: Context, scheduleType: string): Promise<void>;
    handleCreateMailingCustomTime(ctx: Context, timeText: string): Promise<void>;
    handleAddMailingPhoto(ctx: Context): Promise<void>;
    handleAddMailingVideo(ctx: Context): Promise<void>;
    handleSkipMailingMedia(ctx: Context): Promise<void>;
    showMailingScheduleSelection(ctx: Context): Promise<void>;
    createMailingFinal(ctx: Context, scheduleTime?: Date): Promise<void>;
    showMailingsList(ctx: Context): Promise<void>;
    getMailingStatusText(status: string): string;
    showChannelsToDelete(ctx: Context): Promise<void>;
    showRafflesToDelete(ctx: Context): Promise<void>;
    showActiveRafflesToDelete(ctx: Context): Promise<void>;
    showFinishedRafflesToDelete(ctx: Context): Promise<void>;
    handleDeleteChannel(ctx: Context, channelId: number): Promise<void>;
    handleDeleteRaffle(ctx: Context, raffleId: number): Promise<void>;
    getAdminStats(): Promise<{
        totalUsers: number;
        usersToday: number;
        activeRaffles: number;
        totalRaffles: number;
        totalChannels: number;
        totalMailings: number;
    }>;
    handleParticipation(ctx: Context, raffleId: number): Promise<void>;
    showSubscriptionChannels(ctx: Context, raffle: any, channels: any[]): Promise<void>;
    handleSubscribeToChannel(ctx: Context, channelId: number): Promise<void>;
    checkSubscriptionAndParticipate(ctx: Context, raffleId: number): Promise<void>;
    checkSubscriptions(ctx: Context, raffleId: number): Promise<void>;
    checkSocialSubscriptions(ctx: Context, raffleId: number): Promise<void>;
    checkCombinedSubscriptions(ctx: Context, raffleId: number): Promise<void>;
    showUserRaffles(ctx: Context): Promise<void>;
    getStatusText(status: string): string;
    showActiveRaffles(ctx: Context): Promise<void>;
    showRaffleDetails(ctx: Context, raffleId: number): Promise<void>;
    showHelp(ctx: Context): Promise<void>;
    showOfficialChannel(ctx: Context): Promise<void>;
    showMainMenu(ctx: Context): Promise<void>;
    handleAdminPanelAccess(ctx: Context): Promise<void>;
    showAdminOfficialChannel(ctx: Context): Promise<void>;
    startAddOfficialChannel(ctx: Context): Promise<void>;
    showOfficialChannelInfo(ctx: Context): Promise<void>;
    deleteOfficialChannel(ctx: Context): Promise<void>;
    handleAddOfficialChannel(ctx: Context, text: string): Promise<void>;
    startEditOfficialChannelDescription(ctx: Context): Promise<void>;
    handleEditOfficialChannelDescription(ctx: Context, text: string): Promise<void>;
    showMailingsToDelete(ctx: Context): Promise<void>;
    handleDeleteMailing(ctx: Context, mailingId: number): Promise<void>;
    handleMailingPhoto(ctx: Context): Promise<void>;
    handleMailingVideo(ctx: Context): Promise<void>;
    startEditWelcomeMessage(ctx: Context): Promise<void>;
    startAddCoverPhoto(ctx: Context): Promise<void>;
    removeCoverPhoto(ctx: Context): Promise<void>;
    handleEditWelcomeMessageText(ctx: Context, text: string): Promise<void>;
    handleCoverPhoto(ctx: Context): Promise<void>;
    handleRaffleTypeSelection(ctx: Context, type: string): Promise<void>;
    handleReferralRequirementSelection(ctx: Context, requirement: string): Promise<void>;
    handleCreateRaffleReferralCount(ctx: Context, text: string): Promise<void>;
    showReferralSystem(ctx: Context): Promise<void>;
    showReferralSystemWithContext(ctx: Context, raffleId: number): Promise<void>;
    showReferralLink(ctx: Context): Promise<void>;
    showReferralStats(ctx: Context): Promise<void>;
    showReferralList(ctx: Context): Promise<void>;
    showReferralTop(ctx: Context): Promise<void>;
    copyReferralLink(ctx: Context): Promise<void>;
    shareReferralLink(ctx: Context): Promise<void>;
    checkReferralRequirements(ctx: Context, raffleId: number): Promise<void>;
    private getAutoEnrolledRaffles;
    showReferralLinkWithContext(ctx: Context, raffleId: number): Promise<void>;
    showReferralStatsWithContext(ctx: Context, raffleId: number): Promise<void>;
    showReferralListWithContext(ctx: Context, raffleId: number): Promise<void>;
    showReferralTopWithContext(ctx: Context, raffleId: number): Promise<void>;
    showAdminSocial(ctx: Context): Promise<void>;
    startAddSocialAccount(ctx: Context): Promise<void>;
    showSocialAccountsList(ctx: Context): Promise<void>;
    showSocialAccountsStats(ctx: Context): Promise<void>;
    showSocialAccounts(ctx: Context, raffle: any, socialAccounts: any[]): Promise<void>;
    showCombinedRequirements(ctx: Context, raffle: any, channels: any[], socialAccounts: any[]): Promise<void>;
    private getPlatformIcon;
    handleSocialPlatformSelection(ctx: Context, platform: string): Promise<void>;
    handleSocialUsernameInput(ctx: Context, username: string): Promise<void>;
    handleSocialDisplayNameInput(ctx: Context, displayName: string): Promise<void>;
    handleSocialProfileUrlInput(ctx: Context, profileUrl: string): Promise<void>;
    handleSocialFollowerCountInput(ctx: Context, followerCountText: string): Promise<void>;
    handleSocialVerifiedSelection(ctx: Context, isVerified: boolean): Promise<void>;
}
//# sourceMappingURL=userHandlers.d.ts.map