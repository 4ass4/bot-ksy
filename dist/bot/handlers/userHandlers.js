import { InlineKeyboard } from 'grammy';
import { MailingType, RaffleStatus, AnalyticsEventType } from '../../types/index.js';
import { Keyboards } from '../keyboards.js';
export class UnifiedHandlers {
    bot;
    userService;
    raffleService;
    channelService;
    mailingService;
    officialChannelService;
    botSettingsService;
    referralService;
    analyticsService;
    socialService;
    socialAccountService;
    adminStates = {};
    adminIds;
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å fallback
    async sendMessage(ctx, text, options = {}) {
        try {
            await ctx.editMessageText(text, options);
        }
        catch (error) {
            if (error.description && error.description.includes('message is not modified')) {
                // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                console.log('‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É');
                return;
            }
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ:', error.message);
            await ctx.reply(text, options);
        }
    }
    constructor(bot, userService, raffleService, channelService, mailingService, officialChannelService, botSettingsService, referralService, analyticsService, socialService, socialAccountService) {
        this.bot = bot;
        this.userService = userService;
        this.raffleService = raffleService;
        this.channelService = channelService;
        this.mailingService = mailingService;
        this.officialChannelService = officialChannelService;
        this.botSettingsService = botSettingsService;
        this.referralService = referralService;
        this.analyticsService = analyticsService;
        this.socialService = socialService;
        this.socialAccountService = socialAccountService;
        // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const adminIds = process.env.ADMIN_IDS || '';
        this.adminIds = adminIds.split(',').map(id => parseInt(id.trim())).filter(id => id > 0);
        console.log(`üîß –ó–∞–≥—Ä—É–∂–µ–Ω—ã ID –∞–¥–º–∏–Ω–æ–≤: ${this.adminIds.join(', ')}`);
    }
    register() {
        // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
        this.bot.command('start', async (ctx) => {
            if (!ctx.from)
                return;
            console.log(`üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
            const user = ctx.from;
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const createdUser = await this.userService.createUser(user.id, user.first_name || '', user.last_name || '', user.username || '');
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –µ—Å—Ç—å
            const startParam = ctx.match;
            let autoEnrolledRaffles = [];
            if (startParam) {
                const isReferral = await this.referralService.processStartParameter(startParam, createdUser.id);
                if (isReferral) {
                    console.log(`üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ`);
                    await this.analyticsService.trackEvent(AnalyticsEventType.REFERRAL_CREATED, createdUser.id, undefined, undefined, startParam);
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω
                    autoEnrolledRaffles = await this.getAutoEnrolledRaffles(createdUser.id);
                }
            }
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await this.analyticsService.trackEvent(AnalyticsEventType.USER_REGISTERED, createdUser.id);
            let welcomeText = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!

üéÅ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –∏ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö.

üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`;
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (autoEnrolledRaffles.length > 0) {
                welcomeText += `\n\nüéâ *–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!*\n`;
                welcomeText += `–í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ ${autoEnrolledRaffles.length} —Ä–æ–∑—ã–≥—Ä—ã—à${autoEnrolledRaffles.length > 1 ? '–µ–π' : ''}!\n`;
                welcomeText += `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª "üéÅ –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏" –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`;
            }
            await ctx.reply(welcomeText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.mainUser()
            });
        });
        // –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        this.bot.command('admin', async (ctx) => {
            if (!ctx.from)
                return;
            if (!this.adminIds.includes(ctx.from.id)) {
                await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
                return;
            }
            console.log(`üîß –ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏`);
            const adminText = `üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
            await ctx.reply(adminText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.adminMain()
            });
        });
        // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
        this.bot.command('help', async (ctx) => {
            await this.showHelp(ctx);
        });
        // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–∏–π
        this.bot.command('my_raffles', async (ctx) => {
            await this.showUserRaffles(ctx);
        });
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback query
        this.bot.on('callback_query:data', async (ctx) => {
            const data = ctx.callbackQuery?.data;
            if (!ctx.from || !data)
                return;
            const userId = ctx.from.id;
            console.log(`üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –µ–¥–∏–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
            await this.handleCallback(ctx, data);
            await ctx.answerCallbackQuery();
        });
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message:text', async (ctx) => {
            if (!ctx.from)
                return;
            const userId = ctx.from.id;
            const text = ctx.message?.text;
            if (!text)
                return;
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if (text.startsWith('/')) {
                console.log(`üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: ${text}`);
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            const isAdmin = this.adminIds.includes(userId);
            if (isAdmin) {
                console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: "${text}"`);
                await this.handleAdminText(ctx, text);
            }
        });
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
        this.bot.on('message:photo', async (ctx) => {
            if (!ctx.from)
                return;
            const userId = ctx.from.id;
            const isAdmin = this.adminIds.includes(userId);
            if (isAdmin) {
                console.log(`üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç ${userId}`);
                await this.handleAdminMedia(ctx);
            }
        });
        this.bot.on('message:video', async (ctx) => {
            if (!ctx.from)
                return;
            const userId = ctx.from.id;
            const isAdmin = this.adminIds.includes(userId);
            if (isAdmin) {
                console.log(`üìπ –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç ${userId}`);
                await this.handleAdminMedia(ctx);
            }
        });
    }
    // ===== –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –ö–ù–û–ü–û–ö =====
    async handleCallback(ctx, data) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const isAdmin = this.adminIds.includes(userId);
        // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        const isUserReferralButton = data === 'referral_system' ||
            data === 'referral_link' ||
            data === 'referral_stats' ||
            data === 'referral_list' ||
            data === 'referral_top' ||
            data === 'referral_copy_link' ||
            data === 'referral_share' ||
            data.startsWith('referral_system_') ||
            data.startsWith('referral_link_') ||
            data.startsWith('referral_stats_') ||
            data.startsWith('referral_list_') ||
            data.startsWith('referral_top_') ||
            data.startsWith('check_referrals_');
        if (!isUserReferralButton && ((data.startsWith('admin_') && data !== 'admin_panel') || data.startsWith('back_admin') ||
            data.startsWith('channels_') || data.startsWith('raffles_') ||
            data.startsWith('mailings_') || data.startsWith('cancel_action') ||
            data.startsWith('publish_raffle') || data.startsWith('edit_raffle') ||
            data.startsWith('select_channel_') || data.startsWith('create_raffle_final') ||
            data.startsWith('delete_channel_') || data.startsWith('delete_raffle_') ||
            data.startsWith('delete_raffles_') || data.startsWith('official_channel_') ||
            data.startsWith('mailing_type_') || data.startsWith('mailing_schedule_') ||
            data.startsWith('mailing_add_') || data.startsWith('mailing_skip_') ||
            data.startsWith('raffle_add_') || data.startsWith('raffle_skip_') ||
            data.startsWith('raffle_type_') || data.startsWith('referral_requirement_') ||
            data.startsWith('delete_mailing_') || data.startsWith('settings_') ||
            data.startsWith('social_') || data.startsWith('select_social_'))) {
            if (!isAdmin) {
                console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏: ${data}`);
                await ctx.answerCallbackQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
                return;
            }
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏ ${userId}: ${data}`);
            await this.handleAdminCallback(ctx, data);
            return;
        }
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ - –¥–ª—è –≤—Å–µ—Ö
        console.log(`üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏ ${userId}: ${data}`);
        await this.handleUserCallback(ctx, data);
    }
    async handleUserCallback(ctx, data) {
        if (!ctx.from)
            return;
        if (data.startsWith('participate_')) {
            const raffleId = parseInt(data.replace('participate_', ''));
            await this.handleParticipation(ctx, raffleId);
        }
        else if (data.startsWith('subscribe_')) {
            const channelId = parseInt(data.replace('subscribe_', ''));
            await this.handleSubscribeToChannel(ctx, channelId);
        }
        else if (data.startsWith('check_subscription_')) {
            const raffleId = parseInt(data.replace('check_subscription_', ''));
            await this.checkSubscriptionAndParticipate(ctx, raffleId);
        }
        else if (data.startsWith('check_subs_')) {
            const raffleId = parseInt(data.replace('check_subs_', ''));
            await this.checkSubscriptions(ctx, raffleId);
        }
        else if (data.startsWith('check_social_subscription_')) {
            const raffleId = parseInt(data.replace('check_social_subscription_', ''));
            await this.checkSocialSubscriptions(ctx, raffleId);
        }
        else if (data.startsWith('check_combined_subscription_')) {
            const raffleId = parseInt(data.replace('check_combined_subscription_', ''));
            await this.checkCombinedSubscriptions(ctx, raffleId);
        }
        else if (data === 'my_raffles') {
            await this.showUserRaffles(ctx);
        }
        else if (data === 'active_raffles') {
            await this.showActiveRaffles(ctx);
        }
        else if (data.startsWith('view_raffle_')) {
            const raffleId = parseInt(data.replace('view_raffle_', ''));
            await this.showRaffleDetails(ctx, raffleId);
        }
        else if (data === 'help_command') {
            await this.showHelp(ctx);
        }
        else if (data === 'official_channel') {
            await this.showOfficialChannel(ctx);
        }
        else if (data === 'admin_panel') {
            await this.handleAdminPanelAccess(ctx);
        }
        else if (data === 'back_to_main') {
            await this.showMainMenu(ctx);
        }
        else if (data === 'referral_system') {
            await this.showReferralSystem(ctx);
        }
        else if (data.startsWith('referral_system_')) {
            const raffleId = parseInt(data.replace('referral_system_', ''));
            await this.showReferralSystemWithContext(ctx, raffleId);
        }
        else if (data.startsWith('check_referrals_')) {
            const raffleId = parseInt(data.replace('check_referrals_', ''));
            await this.checkReferralRequirements(ctx, raffleId);
        }
        else if (data === 'referral_link') {
            await this.showReferralLink(ctx);
        }
        else if (data === 'referral_stats') {
            await this.showReferralStats(ctx);
        }
        else if (data === 'referral_list') {
            await this.showReferralList(ctx);
        }
        else if (data === 'referral_top') {
            await this.showReferralTop(ctx);
        }
        else if (data === 'referral_copy_link') {
            await this.copyReferralLink(ctx);
        }
        else if (data === 'referral_share') {
            await this.shareReferralLink(ctx);
        }
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        else if (data.startsWith('referral_link_')) {
            const raffleId = parseInt(data.replace('referral_link_', ''));
            await this.showReferralLinkWithContext(ctx, raffleId);
        }
        else if (data.startsWith('referral_stats_')) {
            const raffleId = parseInt(data.replace('referral_stats_', ''));
            await this.showReferralStatsWithContext(ctx, raffleId);
        }
        else if (data.startsWith('referral_list_')) {
            const raffleId = parseInt(data.replace('referral_list_', ''));
            await this.showReferralListWithContext(ctx, raffleId);
        }
        else if (data.startsWith('referral_top_')) {
            const raffleId = parseInt(data.replace('referral_top_', ''));
            await this.showReferralTopWithContext(ctx, raffleId);
        }
        else {
            console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞: ${data}`);
        }
    }
    // ===== –ê–î–ú–ò–ù–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
    async handleAdminCallback(ctx, data) {
        if (!ctx.from)
            return;
        switch (data) {
            case 'admin_raffles':
                console.log('üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_raffles');
                await this.showAdminRaffles(ctx);
                break;
            case 'admin_channels':
                console.log('üì∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_channels');
                await this.showAdminChannels(ctx);
                break;
            case 'admin_mailings':
                console.log('üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_mailings');
                await this.showAdminMailings(ctx);
                break;
            case 'admin_stats':
                console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_stats');
                await this.showAdminStats(ctx);
                break;
            case 'admin_settings':
                console.log('‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_settings');
                await this.showBotSettings(ctx);
                break;
            case 'back_admin':
                console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ back_admin');
                await this.showAdminMain(ctx);
                break;
            case 'back_to_main':
                console.log('üè† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ back_to_main');
                await this.showMainMenu(ctx);
                break;
            case 'raffles_create':
                console.log('üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ raffles_create');
                await this.startCreateRaffle(ctx);
                break;
            case 'raffles_active':
                console.log('üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ raffles_active');
                await this.showActiveRafflesAdmin(ctx);
                break;
            case 'channels_list':
                console.log('üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ channels_list');
                await this.showChannelsList(ctx);
                break;
            case 'channels_add':
                console.log('‚ûï –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ channels_add');
                await this.startAddChannel(ctx);
                break;
            case 'mailings_create':
                console.log('üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ mailings_create');
                await this.startCreateMailing(ctx);
                break;
            case 'mailings_list':
                console.log('üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ mailings_list');
                await this.showMailingsList(ctx);
                break;
            case 'mailings_delete':
                console.log('üóëÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ mailings_delete');
                await this.showMailingsToDelete(ctx);
                break;
            case 'mailing_type_all_users':
                console.log('üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
                await this.handleSelectMailingType(ctx, MailingType.ALL_USERS);
                break;
            case 'mailing_type_raffle_participants':
                console.log('üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleSelectMailingType(ctx, MailingType.RAFFLE_PARTICIPANTS);
                break;
            case 'mailing_schedule_now':
                console.log('üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å');
                await this.handleSelectMailingSchedule(ctx, 'now');
                break;
            case 'mailing_schedule_custom':
                console.log('üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å');
                await this.handleSelectMailingSchedule(ctx, 'custom');
                break;
            case 'mailing_add_photo':
                console.log('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ');
                await this.handleAddMailingPhoto(ctx);
                break;
            case 'mailing_add_video':
                console.log('üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ');
                await this.handleAddMailingVideo(ctx);
                break;
            case 'mailing_skip_media':
                console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
                await this.handleSkipMailingMedia(ctx);
                break;
            case 'raffle_add_photo':
                console.log('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É');
                await this.handleAddRafflePhoto(ctx);
                break;
            case 'raffle_add_video':
                console.log('üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É');
                await this.handleAddRaffleVideo(ctx);
                break;
            case 'raffle_skip_media':
                console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –º–µ–¥–∏–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleSkipRaffleMedia(ctx);
                break;
            case (data.match(/^delete_mailing_(\d+)$/) ? data : null):
                const mailingId = parseInt(data.replace('delete_mailing_', ''));
                console.log(`üóëÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ #${mailingId}`);
                await this.handleDeleteMailing(ctx, mailingId);
                break;
            case 'create_raffle_final':
                console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ create_raffle_final');
                await this.handleCreateRaffleFinal(ctx);
                break;
            case 'cancel_action':
                console.log('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ cancel_action');
                await this.cancelAdminAction(ctx);
                break;
            case 'channels_delete':
                console.log('üóëÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ channels_delete');
                await this.showChannelsToDelete(ctx);
                break;
            case 'raffles_delete':
                console.log('üóëÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ raffles_delete');
                await this.showRafflesToDelete(ctx);
                break;
            case 'delete_raffles_active':
                console.log('üü¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ delete_raffles_active');
                await this.showActiveRafflesToDelete(ctx);
                break;
            case 'delete_raffles_finished':
                console.log('üî¥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ delete_raffles_finished');
                await this.showFinishedRafflesToDelete(ctx);
                break;
            case 'admin_official_channel':
                console.log('üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_official_channel');
                await this.showAdminOfficialChannel(ctx);
                break;
            case 'official_channel_add':
                console.log('‚ûï –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ official_channel_add');
                await this.startAddOfficialChannel(ctx);
                break;
            case 'official_channel_info':
                console.log('üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ official_channel_info');
                await this.showOfficialChannelInfo(ctx);
                break;
            case 'official_channel_delete':
                console.log('üóëÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ official_channel_delete');
                await this.deleteOfficialChannel(ctx);
                break;
            case 'official_channel_edit_description':
                console.log('‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ official_channel_edit_description');
                await this.startEditOfficialChannelDescription(ctx);
                break;
            case 'settings_welcome_message':
                console.log('‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ settings_welcome_message');
                await this.startEditWelcomeMessage(ctx);
                break;
            case 'settings_cover_photo':
                console.log('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ settings_cover_photo');
                await this.startAddCoverPhoto(ctx);
                break;
            case 'settings_remove_cover':
                console.log('üóëÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ settings_remove_cover');
                await this.removeCoverPhoto(ctx);
                break;
            case 'settings_view':
                console.log('üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ settings_view');
                await this.showBotSettings(ctx);
                break;
            case 'raffle_type_normal':
                console.log('üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleRaffleTypeSelection(ctx, 'normal');
                break;
            case 'raffle_type_referral':
                console.log('üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏');
                await this.handleRaffleTypeSelection(ctx, 'referral');
                break;
            case 'referral_requirement_both':
                console.log('üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –ø–æ–¥–ø–∏—Å–∫–∞ + —Ä–µ—Ñ–µ—Ä–∞–ª—ã');
                await this.handleReferralRequirementSelection(ctx, 'both');
                break;
            case 'referral_requirement_subscription':
                console.log('üì∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∞');
                await this.handleReferralRequirementSelection(ctx, 'subscription');
                break;
            case 'referral_requirement_referrals':
                console.log('üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: —Ç–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã');
                await this.handleReferralRequirementSelection(ctx, 'referrals');
                break;
            case 'admin_social':
                console.log('üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_social');
                await this.showAdminSocial(ctx);
                break;
            case 'social_add':
                console.log('‚ûï –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ social_add');
                await this.startAddSocialAccount(ctx);
                break;
            case 'social_list':
                console.log('üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ social_list');
                await this.showSocialAccountsList(ctx);
                break;
            case 'social_stats':
                console.log('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ social_stats');
                await this.showSocialAccountsStats(ctx);
                break;
            case 'social_platform_instagram':
                console.log('üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: Instagram');
                await this.handleSocialPlatformSelection(ctx, 'INSTAGRAM');
                break;
            case 'social_platform_tiktok':
                console.log('üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: TikTok');
                await this.handleSocialPlatformSelection(ctx, 'TIKTOK');
                break;
            case 'social_platform_twitter':
                console.log('üê¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: Twitter');
                await this.handleSocialPlatformSelection(ctx, 'TWITTER');
                break;
            case 'social_platform_facebook':
                console.log('üìò –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: Facebook');
                await this.handleSocialPlatformSelection(ctx, 'FACEBOOK');
                break;
            case 'social_platform_youtube':
                console.log('üì∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: YouTube');
                await this.handleSocialPlatformSelection(ctx, 'YOUTUBE');
                break;
            case 'social_verified_yes':
                console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –∞–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
                await this.handleSocialVerifiedSelection(ctx, true);
                break;
            case 'social_verified_no':
                console.log('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
                await this.handleSocialVerifiedSelection(ctx, false);
                break;
            default:
                if (data.startsWith('select_social_')) {
                    const socialAccountId = parseInt(data.replace('select_social_', ''));
                    console.log(`üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ${socialAccountId}`);
                    await this.handleSelectSocialAccount(ctx, socialAccountId);
                }
                else if (data.startsWith('edit_raffle_')) {
                    const raffleId = parseInt(data.replace('edit_raffle_', ''));
                    console.log(`‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${raffleId}`);
                    await this.startEditRaffle(ctx, raffleId);
                }
                else if (data.startsWith('publish_raffle_')) {
                    const raffleId = parseInt(data.replace('publish_raffle_', ''));
                    console.log(`üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${raffleId}`);
                    await this.publishRaffle(ctx, raffleId);
                }
                else if (data.startsWith('select_channel_')) {
                    const channelId = parseInt(data.replace('select_channel_', ''));
                    await this.handleSelectChannel(ctx, channelId);
                }
                else if (data.startsWith('delete_channel_')) {
                    const channelId = parseInt(data.replace('delete_channel_', ''));
                    await this.handleDeleteChannel(ctx, channelId);
                }
                else if (data.startsWith('delete_raffle_')) {
                    const raffleId = parseInt(data.replace('delete_raffle_', ''));
                    await this.handleDeleteRaffle(ctx, raffleId);
                }
                else {
                    console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: ${data}`);
                }
                break;
        }
    }
    async handleAdminText(ctx, text) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        if (!state) {
            console.log(`‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è`);
            return;
        }
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ ${userId} —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:`, state);
        console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: step=${state.step}, text=${text}`);
        switch (state.step) {
            case 'create_raffle_title':
                console.log('üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleCreateRaffleTitle(ctx, text);
                break;
            case 'create_raffle_prize':
                console.log('üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleCreateRafflePrize(ctx, text);
                break;
            case 'create_raffle_winners':
                console.log('üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π');
                await this.handleCreateRaffleWinners(ctx, text);
                break;
            case 'create_raffle_duration':
                console.log('‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleCreateRaffleDuration(ctx, text);
                break;
            case 'add_channel':
                console.log('üì∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞');
                await this.handleAddChannel(ctx, text);
                break;
            case 'create_mailing_text':
                console.log('üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏');
                await this.handleCreateMailingText(ctx, text);
                break;
            case 'create_mailing_custom_time':
                console.log('üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏');
                await this.handleCreateMailingCustomTime(ctx, text);
                break;
            case 'create_mailing_photo':
                console.log('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
                await this.handleMailingPhoto(ctx);
                break;
            case 'create_mailing_video':
                console.log('üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
                await this.handleMailingVideo(ctx);
                break;
            case 'create_raffle_photo':
                console.log('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleRafflePhoto(ctx);
                break;
            case 'create_raffle_video':
                console.log('üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleRaffleVideo(ctx);
                break;
            case 'add_cover_photo':
                console.log('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –±–æ—Ç–∞');
                await this.handleCoverPhoto(ctx);
                break;
            case 'select_channel':
                console.log('üì∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤');
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∫–∞–∫ –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
                break;
            case 'add_official_channel':
                console.log('‚ûï –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞');
                await this.handleAddOfficialChannel(ctx, text);
                break;
            case 'edit_official_channel_description':
                console.log('‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞');
                await this.handleEditOfficialChannelDescription(ctx, text);
                break;
            case 'edit_welcome_message':
                console.log('‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
                await this.handleEditWelcomeMessageText(ctx, text);
                break;
            case 'create_raffle_referral_count':
                console.log('üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleCreateRaffleReferralCount(ctx, text);
                break;
            case 'add_social_username':
                console.log('üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ username —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
                await this.handleSocialUsernameInput(ctx, text);
                break;
            case 'add_social_display_name':
                console.log('üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ display_name —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
                await this.handleSocialDisplayNameInput(ctx, text);
                break;
            case 'add_social_profile_url':
                console.log('üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ profile_url —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
                await this.handleSocialProfileUrlInput(ctx, text);
                break;
            case 'add_social_follower_count':
                console.log('üë• –û–±—Ä–∞–±–æ—Ç–∫–∞ follower_count —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞');
                await this.handleSocialFollowerCountInput(ctx, text);
                break;
            default:
                console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: ${state.step}`);
                break;
        }
    }
    async handleAdminMedia(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        if (!state) {
            console.log(`‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è`);
            return;
        }
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ ${userId} —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:`, state);
        switch (state.step) {
            case 'create_mailing_photo':
                console.log('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
                await this.handleMailingPhoto(ctx);
                break;
            case 'create_mailing_video':
                console.log('üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
                await this.handleMailingVideo(ctx);
                break;
            case 'create_raffle_photo':
                console.log('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleRafflePhoto(ctx);
                break;
            case 'create_raffle_video':
                console.log('üìπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
                await this.handleRaffleVideo(ctx);
                break;
            case 'add_cover_photo':
                console.log('üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –±–æ—Ç–∞');
                await this.handleCoverPhoto(ctx);
                break;
            default:
                console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –¥–ª—è –º–µ–¥–∏–∞: ${state.step}`);
                break;
        }
    }
    // ===== –ê–î–ú–ò–ù–°–ö–ò–ï –ú–ï–¢–û–î–´ =====
    async showAdminMain(ctx) {
        const adminText = `üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        await ctx.editMessageText(adminText, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.adminMain()
        });
    }
    async showAdminRaffles(ctx) {
        const text = `üéÅ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.adminRaffles()
        });
    }
    async showAdminChannels(ctx) {
        const text = `ÔøΩÔøΩ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.adminChannels()
        });
    }
    async showAdminMailings(ctx) {
        const text = `üì¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.adminMailings()
        });
    }
    async showAdminStats(ctx) {
        const stats = await this.getAdminStats();
        const text = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalUsers}
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.usersToday}

üéÅ *–†–æ–∑—ã–≥—Ä—ã—à–∏:*
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.activeRaffles}
‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalRaffles}

üì∫ *–ö–∞–Ω–∞–ª—ã:*
‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalChannels}

üì¢ *–†–∞—Å—Å—ã–ª–∫–∏:*
‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalMailings}`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async showBotSettings(ctx) {
        console.log('‚öôÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞');
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = await this.botSettingsService.getSettings();
        const text = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*

üîß *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${settings.welcome_message.length > 50 ? settings.welcome_message.substring(0, 50) + '...' : settings.welcome_message}
‚Ä¢ –û–±–ª–æ–∂–∫–∞ –±–æ—Ç–∞: ${settings.cover_photo_file_id ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
‚Ä¢ –ê–¥–º–∏–Ω ID: ${this.adminIds.join(', ')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0.0

üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:`;
        await this.sendMessage(ctx, text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.botSettings()
        });
    }
    async startCreateRaffle(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId] = {
            step: 'create_raffle_type',
            tempData: {}
        };
        await ctx.editMessageText('üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', {
            reply_markup: Keyboards.raffleCreationType()
        });
    }
    async handleCreateRaffleTitle(ctx, text) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId].tempData.title = text;
        this.adminStates[userId].step = 'create_raffle_prize';
        await ctx.reply('üéÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:');
    }
    async handleCreateRafflePrize(ctx, text) {
        const userId = ctx.from.id;
        this.adminStates[userId].tempData.prize = text;
        this.adminStates[userId].step = 'create_raffle_media';
        try {
            await ctx.editMessageText('üéÅ *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:* ' + text + '\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è –ø—Ä–∏–∑–∞:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.raffleMediaSelection()
            });
        }
        catch (error) {
            await ctx.reply('üéÅ *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:* ' + text + '\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–¥–∏–∞ –¥–ª—è –ø—Ä–∏–∑–∞:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.raffleMediaSelection()
            });
        }
    }
    async handleCreateRaffleWinners(ctx, text) {
        const winnersCount = parseInt(text);
        if (isNaN(winnersCount) || winnersCount < 1) {
            await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–º–∏–Ω–∏–º—É–º 1):');
            return;
        }
        const userId = ctx.from.id;
        this.adminStates[userId].tempData.winnersCount = winnersCount;
        this.adminStates[userId].step = 'create_raffle_duration';
        await ctx.reply('‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —á–∞—Å–∞—Ö:');
    }
    async handleCreateRaffleDuration(ctx, text) {
        const durationHours = parseInt(text);
        if (isNaN(durationHours) || durationHours < 1) {
            await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö (–º–∏–Ω–∏–º—É–º 1):');
            return;
        }
        const userId = ctx.from.id;
        this.adminStates[userId].tempData.durationHours = durationHours;
        this.adminStates[userId].step = 'create_raffle_channels';
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–æ–≤
        await this.showChannelSelection(ctx);
    }
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
    async handleAddRafflePhoto(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId].step = 'create_raffle_photo';
        try {
            await ctx.editMessageText('üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏–∑–∞:', {
                reply_markup: Keyboards.cancelAction()
            });
        }
        catch (error) {
            await ctx.reply('üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏–∑–∞:', {
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    async handleAddRaffleVideo(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId].step = 'create_raffle_video';
        try {
            await ctx.editMessageText('üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø—Ä–∏–∑–∞:', {
                reply_markup: Keyboards.cancelAction()
            });
        }
        catch (error) {
            await ctx.reply('üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø—Ä–∏–∑–∞:', {
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    async handleSkipRaffleMedia(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId].step = 'create_raffle_winners';
        await ctx.reply('üèÜ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:');
    }
    async handleRafflePhoto(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const photo = ctx.message?.photo;
        if (!photo || photo.length === 0) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }
        const fileId = photo[photo.length - 1].file_id;
        this.adminStates[userId].tempData.photoFileId = fileId;
        this.adminStates[userId].step = 'create_raffle_winners';
        await ctx.reply('‚úÖ –§–æ—Ç–æ –ø—Ä–∏–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üèÜ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:');
    }
    async handleRaffleVideo(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const video = ctx.message?.video;
        if (!video) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }
        const fileId = video.file_id;
        this.adminStates[userId].tempData.videoFileId = fileId;
        this.adminStates[userId].step = 'create_raffle_winners';
        await ctx.reply('‚úÖ –í–∏–¥–µ–æ –ø—Ä–∏–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ! üèÜ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:');
    }
    async showChannelSelection(ctx) {
        const channels = await this.channelService.getAllChannels();
        const socialAccounts = await this.socialAccountService.getAllSocialAccounts();
        if (channels.length === 0 && socialAccounts.length === 0) {
            await ctx.reply('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö.', {
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        const userId = ctx.from.id;
        this.adminStates[userId].tempData.selectedChannels = [];
        this.adminStates[userId].tempData.selectedSocialAccounts = [];
        this.adminStates[userId].tempData.availableChannels = channels;
        this.adminStates[userId].tempData.availableSocialAccounts = socialAccounts;
        await this.updateChannelSelectionMessage(ctx);
    }
    async updateChannelSelectionMessage(ctx) {
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        const channels = state.tempData.availableChannels || [];
        const socialAccounts = state.tempData.availableSocialAccounts || [];
        const selectedChannels = state.tempData.selectedChannels || [];
        const selectedSocialAccounts = state.tempData.selectedSocialAccounts || [];
        let text = `üì∫ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n`;
        text += `üéÅ –†–æ–∑—ã–≥—Ä—ã—à: ${state.tempData.title}\n`;
        text += `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${state.tempData.winnersCount}\n`;
        text += `‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${state.tempData.durationHours} —á–∞—Å–æ–≤\n\n`;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Telegram –∫–∞–Ω–∞–ª—ã
        if (channels.length > 0) {
            text += `üì∫ Telegram –∫–∞–Ω–∞–ª—ã:\n\n`;
            channels.forEach((channel, index) => {
                const isSelected = selectedChannels.includes(channel.id);
                const status = isSelected ? '‚úÖ' : '‚ùå';
                text += `${index + 1}. ${status} ${channel.name}\n`;
                text += `   ${channel.invite_link}\n\n`;
            });
        }
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        if (socialAccounts.length > 0) {
            text += `üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n\n`;
            socialAccounts.forEach((account, index) => {
                const isSelected = selectedSocialAccounts.includes(account.id);
                const status = isSelected ? '‚úÖ' : '‚ùå';
                const platformIcon = this.getPlatformIcon(account.platform);
                const verifiedBadge = account.is_verified ? '‚úÖ' : '';
                text += `${channels.length + index + 1}. ${status} ${platformIcon} @${account.username}${verifiedBadge}\n`;
                text += `   üìù ${account.display_name}\n`;
                text += `   üîó ${account.profile_url}\n\n`;
            });
        }
        text += `üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä`;
        const keyboard = new InlineKeyboard();
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤
        channels.forEach((channel, index) => {
            const isSelected = selectedChannels.includes(channel.id);
            const buttonText = isSelected ? `‚úÖ ${channel.name}` : `‚ùå ${channel.name}`;
            keyboard.text(buttonText, `select_channel_${channel.id}`);
            if ((index + 1) % 2 === 0)
                keyboard.row();
        });
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        socialAccounts.forEach((account, index) => {
            const isSelected = selectedSocialAccounts.includes(account.id);
            const platformIcon = this.getPlatformIcon(account.platform);
            const verifiedBadge = account.is_verified ? '‚úÖ' : '';
            const buttonText = isSelected ? `‚úÖ ${platformIcon} @${account.username}${verifiedBadge}` : `‚ùå ${platformIcon} @${account.username}`;
            keyboard.text(buttonText, `select_social_${account.id}`);
            if ((channels.length + index + 1) % 2 === 0)
                keyboard.row();
        });
        keyboard.row().text('‚úÖ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', 'create_raffle_final');
        keyboard.row().text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action');
        await ctx.reply(text, {
            reply_markup: keyboard
        });
    }
    async handleSelectChannel(ctx, channelId) {
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        const selectedChannels = state.tempData.selectedChannels || [];
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        if (selectedChannels.includes(channelId)) {
            state.tempData.selectedChannels = selectedChannels.filter((id) => id !== channelId);
        }
        else {
            state.tempData.selectedChannels = [...selectedChannels, channelId];
        }
        await this.updateChannelSelectionMessage(ctx);
    }
    async handleSelectSocialAccount(ctx, socialAccountId) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        const selectedSocialAccounts = state.tempData.selectedSocialAccounts || [];
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        if (selectedSocialAccounts.includes(socialAccountId)) {
            state.tempData.selectedSocialAccounts = selectedSocialAccounts.filter((id) => id !== socialAccountId);
        }
        else {
            state.tempData.selectedSocialAccounts = [...selectedSocialAccounts, socialAccountId];
        }
        await this.updateChannelSelectionMessage(ctx);
    }
    async handleCreateRaffleFinal(ctx) {
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        const tempData = state.tempData;
        // –°–æ–∑–¥–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
        const endDate = new Date();
        endDate.setHours(endDate.getHours() + tempData.durationHours);
        const raffle = await this.raffleService.createRaffle(tempData.prize, tempData.winnersCount, endDate, tempData.selectedChannels || [], tempData.photoFileId, tempData.videoFileId, tempData.referralRequirement || false, tempData.minReferrals || 0, tempData.maxReferrals || 0, tempData.referralBonus);
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É
        const selectedSocialAccounts = tempData.selectedSocialAccounts || [];
        for (const socialAccountId of selectedSocialAccounts) {
            await this.socialAccountService.addSocialRequirementToRaffle(raffle.id, socialAccountId, 'FOLLOW');
        }
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete this.adminStates[userId];
        const channelCount = tempData.selectedChannels?.length || 0;
        const socialAccountCount = tempData.selectedSocialAccounts?.length || 0;
        const channelText = channelCount === 1 ? '–∫–∞–Ω–∞–ª' :
            channelCount >= 2 && channelCount <= 4 ? '–∫–∞–Ω–∞–ª–∞' : '–∫–∞–Ω–∞–ª–æ–≤';
        const socialText = socialAccountCount === 1 ? '–∞–∫–∫–∞—É–Ω—Ç' :
            socialAccountCount >= 2 && socialAccountCount <= 4 ? '–∞–∫–∫–∞—É–Ω—Ç–∞' : '–∞–∫–∫–∞—É–Ω—Ç–æ–≤';
        let raffleInfo = `‚úÖ –†–æ–∑—ã–≥—Ä—ã—à "${tempData.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
            `üéÅ –ü—Ä–∏–∑: ${tempData.prize}\n` +
            `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${tempData.winnersCount}\n` +
            `‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${tempData.durationHours} —á–∞—Å–æ–≤\n` +
            `üì∫ –°–≤—è–∑–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${channelCount} ${channelText}`;
        if (socialAccountCount > 0) {
            raffleInfo += `\nüì± –°–≤—è–∑–∞–Ω–æ —Å–æ—Ü—Å–µ—Ç–µ–π: ${socialAccountCount} ${socialText}`;
        }
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
        if (tempData.referralRequirement) {
            raffleInfo += `\nüë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${tempData.minReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`;
            if (tempData.referralBonus) {
                raffleInfo += `\nüéÅ –ë–æ–Ω—É—Å: ${tempData.referralBonus}`;
            }
        }
        raffleInfo += `\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        await ctx.editMessageText(raffleInfo, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.raffleCreatedActions(raffle.id)
        });
    }
    async cancelAdminAction(ctx) {
        const userId = ctx.from.id;
        delete this.adminStates[userId];
        await ctx.editMessageText('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async showActiveRafflesAdmin(ctx) {
        const raffles = await this.raffleService.getActiveRaffles();
        if (raffles.length === 0) {
            await ctx.editMessageText('üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ—Ç.', {
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        let text = `üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:*\n\n`;
        raffles.forEach((raffle, index) => {
            text += `${index + 1}. *${raffle.prize_description}*\n`;
            text += `   üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}\n`;
            text += `   üë• –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}\n`;
            text += `   ‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${new Date(raffle.end_date).toLocaleDateString('ru-RU')}\n\n`;
        });
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async showChannelsList(ctx) {
        const channels = await this.channelService.getAllChannels();
        if (channels.length === 0) {
            await ctx.editMessageText('üì≠ –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', {
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        let text = `üì∫ *–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:*\n\n`;
        channels.forEach((channel, index) => {
            text += `${index + 1}. *${channel.name}*\n`;
            text += `   \`${channel.invite_link}\`\n\n`;
        });
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async startAddChannel(ctx) {
        const userId = ctx.from.id;
        this.adminStates[userId] = {
            step: 'add_channel',
            tempData: {}
        };
        console.log(`‚ûï –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        console.log(`üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, this.adminStates[userId]);
        await ctx.editMessageText('üì∫ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:', {
            reply_markup: Keyboards.cancelAction()
        });
    }
    async handleAddChannel(ctx, text) {
        console.log(`‚ûï –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞`);
        console.log(`ÔøΩÔøΩ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: ${text}`);
        try {
            // –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            const channelMatch = text.match(/https:\/\/t\.me\/([^\/\s]+)/);
            if (!channelMatch) {
                await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://t.me/channel_name');
                return;
            }
            const channelUsername = channelMatch[1];
            console.log(`üì∫ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: ID=@${channelUsername}, Link=${text}`);
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            const chat = await this.bot.api.getChat(`@${channelUsername}`);
            console.log(`üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:`, chat);
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await this.channelService.createChannel(chat.id.toString(), chat.title || 'Unknown Channel', text);
            const userId = ctx.from.id;
            delete this.adminStates[userId];
            await ctx.reply(`‚úÖ –ö–∞–Ω–∞–ª "${chat.title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`, {
                reply_markup: Keyboards.backToAdmin()
            });
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ:`, error);
            if (error.code === 'SQLITE_CONSTRAINT') {
                await ctx.reply('‚ö†Ô∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.', {
                    reply_markup: Keyboards.backToAdmin()
                });
            }
            else {
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
                    reply_markup: Keyboards.backToAdmin()
                });
            }
        }
    }
    async startEditRaffle(ctx, raffleId) {
        console.log(`‚úèÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${raffleId}`);
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
            const raffle = await this.raffleService.getRaffleById(raffleId);
            if (!raffle) {
                await ctx.editMessageText('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                    reply_markup: Keyboards.backToAdmin()
                });
                return;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏
            const participants = await this.raffleService.getParticipantsByRaffleId(raffleId);
            const hasParticipants = participants.length > 0;
            const userId = ctx.from.id;
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            this.adminStates[userId] = {
                step: 'edit_raffle_select_field',
                tempData: {
                    raffleId: raffleId,
                    hasParticipants: hasParticipants,
                    currentRaffle: raffle
                }
            };
            const participantsWarning = hasParticipants ?
                '\n‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –£ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.' : '';
            const text = `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞*

üéÅ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${raffle.prize_description}
üèÜ *–ü—Ä–∏–∑:* ${raffle.prize_description}
üë• *–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* ${raffle.winners_count}
‚è∞ *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${Math.floor((new Date(raffle.end_date).getTime() - new Date(raffle.created_at).getTime()) / (1000 * 60 * 60))} —á–∞—Å–æ–≤
üë§ *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${participants.length}${participantsWarning}

üí° –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;
            await ctx.editMessageText(text, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.editRaffleFields(hasParticipants)
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.', {
                reply_markup: Keyboards.backToAdmin()
            });
        }
    }
    async publishRaffle(ctx, raffleId) {
        console.log(`üì¢ –ü—É–±–ª–∏–∫—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à ${raffleId}`);
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
            const raffle = await this.raffleService.getRaffleById(raffleId);
            if (!raffle) {
                await ctx.editMessageText('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                    reply_markup: Keyboards.backToAdmin()
                });
                return;
            }
            // –ü—É–±–ª–∏–∫—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å ACTIVE)
            await this.raffleService.updateRaffleStatus(raffleId, RaffleStatus.ACTIVE);
            const successText = `‚úÖ *–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!*

üéÅ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${raffle.prize_description}
üèÜ *–ü—Ä–∏–∑:* ${raffle.prize_description}
üë• *–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* ${raffle.winners_count}
‚è∞ *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:* ${new Date(raffle.end_date).toLocaleDateString('ru-RU')}

üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!`;
            await ctx.editMessageText(successText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.', {
                reply_markup: Keyboards.backToAdmin()
            });
        }
    }
    async startCreateMailing(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId] = {
            step: 'select_mailing_type',
            tempData: {}
        };
        await ctx.editMessageText('üì¢ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.mailingTypeSelection()
        });
    }
    async handleSelectMailingType(ctx, mailingType) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId].tempData.mailingType = mailingType;
        this.adminStates[userId].step = 'create_mailing_text';
        let text = 'üì¢ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n';
        if (mailingType === MailingType.ALL_USERS) {
            text += 'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:';
        }
        else {
            text += 'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:';
        }
        try {
            await ctx.editMessageText(text, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.cancelAction()
            });
        }
        catch (error) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.reply(text, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    async handleCreateMailingText(ctx, text) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        state.tempData.messageText = text;
        state.step = 'create_mailing_media';
        try {
            await ctx.editMessageText('üñºÔ∏è *–ú–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ä–∞—Å—Å—ã–ª–∫–µ:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.mailingMediaSelection()
            });
        }
        catch (error) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.reply('üñºÔ∏è *–ú–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ä–∞—Å—Å—ã–ª–∫–µ:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.mailingMediaSelection()
            });
        }
    }
    async handleSelectMailingSchedule(ctx, scheduleType) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        if (scheduleType === 'now') {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–π—á–∞—Å
            await this.createMailingFinal(ctx, undefined);
        }
        else if (scheduleType === 'custom') {
            state.step = 'create_mailing_custom_time';
            try {
                await ctx.editMessageText('üìÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: `25.12.2024 15:30`', {
                    parse_mode: 'Markdown',
                    reply_markup: Keyboards.cancelAction()
                });
            }
            catch (error) {
                await ctx.reply('üìÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: `25.12.2024 15:30`', {
                    parse_mode: 'Markdown',
                    reply_markup: Keyboards.cancelAction()
                });
            }
        }
    }
    async handleCreateMailingCustomTime(ctx, timeText) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        try {
            // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            const [datePart, timePart] = timeText.split(' ');
            const [day, month, year] = datePart.split('.');
            const [hour, minute] = timePart.split(':');
            const scheduleTime = new Date(parseInt(year), parseInt(month) - 1, parseInt(day), parseInt(hour), parseInt(minute));
            if (scheduleTime <= new Date()) {
                await ctx.editMessageText('‚ùå –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!', {
                    reply_markup: Keyboards.cancelAction()
                });
                return;
            }
            await this.createMailingFinal(ctx, scheduleTime);
        }
        catch (error) {
            await ctx.editMessageText('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`', {
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    async handleAddMailingPhoto(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        state.step = 'create_mailing_photo';
        try {
            await ctx.editMessageText('üñºÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.cancelAction()
            });
        }
        catch (error) {
            await ctx.reply('üñºÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    async handleAddMailingVideo(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        state.step = 'create_mailing_video';
        try {
            await ctx.editMessageText('üìπ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.cancelAction()
            });
        }
        catch (error) {
            await ctx.reply('üìπ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    async handleSkipMailingMedia(ctx) {
        await this.showMailingScheduleSelection(ctx);
    }
    async showMailingScheduleSelection(ctx) {
        try {
            await ctx.editMessageText('üìÖ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.mailingScheduleSelection()
            });
        }
        catch (error) {
            await ctx.reply('üìÖ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.mailingScheduleSelection()
            });
        }
    }
    async createMailingFinal(ctx, scheduleTime) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        try {
            const mailing = await this.mailingService.createMailing(state.tempData.mailingType, state.tempData.messageText, state.tempData.targetRaffleId, state.tempData.photoFileId, // photoFileId
            state.tempData.videoFileId, // videoFileId
            undefined, // inlineKeyboardJson
            scheduleTime);
            delete this.adminStates[userId];
            const scheduleText = scheduleTime
                ? `üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞: ${scheduleTime.toLocaleString('ru-RU')}`
                : 'üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ';
            const successText = `‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n${scheduleText}\n\nüìù –¢–µ–∫—Å—Ç: ${state.tempData.messageText.substring(0, 100)}...`;
            try {
                await ctx.editMessageText(successText, {
                    parse_mode: 'Markdown',
                    reply_markup: Keyboards.backToAdmin()
                });
            }
            catch (error) {
                await ctx.reply(successText, {
                    parse_mode: 'Markdown',
                    reply_markup: Keyboards.backToAdmin()
                });
            }
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            try {
                await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.', {
                    reply_markup: Keyboards.backToAdmin()
                });
            }
            catch (editError) {
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.', {
                    reply_markup: Keyboards.backToAdmin()
                });
            }
        }
    }
    async showMailingsList(ctx) {
        const mailings = await this.mailingService.getAllMailings();
        if (mailings.length === 0) {
            await ctx.editMessageText('üì≠ –†–∞—Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', {
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        let text = `üì¢ *–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫:*\n\n`;
        mailings.forEach((mailing, index) => {
            const statusEmoji = mailing.status === 'COMPLETED' ? '‚úÖ' :
                mailing.status === 'SENDING' ? 'üì§' :
                    mailing.status === 'SCHEDULED' ? '‚è∞' : '‚ùå';
            const typeText = mailing.mailing_type === 'ALL_USERS' ? 'üë• –í—Å–µ–º' : 'üéÅ –£—á–∞—Å—Ç–Ω–∏–∫–∞–º';
            text += `${index + 1}. ${statusEmoji} *${mailing.message_text.substring(0, 50)}...*\n`;
            text += `   üìä –°—Ç–∞—Ç—É—Å: ${this.getMailingStatusText(mailing.status)}\n`;
            text += `   üë• –¢–∏–ø: ${typeText}\n`;
            text += `   üìà –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${mailing.sent_count}, –û—à–∏–±–æ–∫: ${mailing.failed_count}\n`;
            text += `   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(mailing.created_at).toLocaleDateString('ru-RU')}\n`;
            if (mailing.schedule_time) {
                text += `   ‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: ${new Date(mailing.schedule_time).toLocaleString('ru-RU')}\n`;
            }
            text += `\n`;
        });
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    getMailingStatusText(status) {
        switch (status) {
            case 'SCHEDULED': return '‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞';
            case 'SENDING': return 'üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è';
            case 'COMPLETED': return '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞';
            case 'CANCELED': return '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞';
            default: return status;
        }
    }
    async showChannelsToDelete(ctx) {
        const channels = await this.channelService.getAllChannels();
        if (channels.length === 0) {
            await ctx.editMessageText('üì≠ –ö–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', {
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        const text = `üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.channelsToDelete(channels)
        });
    }
    async showRafflesToDelete(ctx) {
        const text = `üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.raffleTypeSelection()
        });
    }
    async showActiveRafflesToDelete(ctx) {
        const raffles = await this.raffleService.getRafflesByStatus(RaffleStatus.ACTIVE);
        if (raffles.length === 0) {
            await ctx.editMessageText('üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', {
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        const text = `üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\nüü¢ - –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.rafflesToDelete(raffles)
        });
    }
    async showFinishedRafflesToDelete(ctx) {
        const raffles = await this.raffleService.getRafflesByStatus(RaffleStatus.FINISHED);
        if (raffles.length === 0) {
            await ctx.editMessageText('üì≠ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', {
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        const text = `üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\nüî¥ - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.rafflesToDelete(raffles)
        });
    }
    async handleDeleteChannel(ctx, channelId) {
        try {
            const channel = await this.channelService.getChannelById(channelId);
            if (!channel) {
                await ctx.answerCallbackQuery('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
            await this.channelService.deleteChannel(channelId);
            await ctx.answerCallbackQuery('‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            await ctx.editMessageText(`üóëÔ∏è *–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω:*\n\nüì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: ${channel.name}\nüîó –°—Å—ã–ª–∫–∞: \`${channel.invite_link}\`\n\n‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:', error);
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞');
            await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.', {
                reply_markup: Keyboards.backToAdmin()
            });
        }
    }
    async handleDeleteRaffle(ctx, raffleId) {
        try {
            const raffle = await this.raffleService.getRaffleById(raffleId);
            if (!raffle) {
                await ctx.answerCallbackQuery('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            // –£–¥–∞–ª—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
            await this.raffleService.deleteRaffle(raffleId);
            await ctx.answerCallbackQuery('‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            await ctx.editMessageText(`üóëÔ∏è *–†–æ–∑—ã–≥—Ä—ã—à —É–¥–∞–ª–µ–Ω:*\n\nüéÅ –ü—Ä–∏–∑: ${raffle.prize_description}\nüë• –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}\nüìÖ –°—Ç–∞—Ç—É—Å: ${this.getStatusText(raffle.status)}\n\n‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
            await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.', {
                reply_markup: Keyboards.backToAdmin()
            });
        }
    }
    async getAdminStats() {
        const totalUsers = await this.userService.getAllUsers();
        const activeRaffles = await this.raffleService.getActiveRaffles();
        const totalRaffles = await this.raffleService.getAllRaffles();
        const totalChannels = await this.channelService.getAllChannels();
        const totalMailings = await this.mailingService.getAllMailings();
        return {
            totalUsers: totalUsers.length,
            usersToday: 0, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            activeRaffles: activeRaffles.length,
            totalRaffles: totalRaffles.length,
            totalChannels: totalChannels.length,
            totalMailings: totalMailings.length
        };
    }
    async handleParticipation(ctx, raffleId) {
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user)
            return;
        const raffle = await this.raffleService.getRaffleById(raffleId);
        if (!raffle || raffle.status !== 'ACTIVE') {
            await ctx.editMessageText('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.', {
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        await this.analyticsService.trackEvent(AnalyticsEventType.USER_JOINED_RAFFLE, user.id, raffleId);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        const isAlreadyParticipating = await this.raffleService.isUserParticipating(user.id, raffleId);
        if (isAlreadyParticipating) {
            console.log(`üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ${raffleId}`);
            const alreadyParticipatingText = `üéâ *–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}
üìÖ –í—Ä–µ–º—è: ${raffle.end_date.toLocaleTimeString('ru-RU')}

‚úÖ *–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ*
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

üçÄ –£–¥–∞—á–∏! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!`;
            await ctx.editMessageText(alreadyParticipatingText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        const channels = await this.channelService.getChannelsByRaffleId(raffleId);
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        const socialAccounts = await this.socialAccountService.getSocialRequirementsForRaffle(raffleId);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è
        const hasChannelRequirements = channels.length > 0;
        const hasSocialRequirements = socialAccounts.length > 0;
        const hasReferralRequirements = raffle.referral_requirement;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        let referralRequirements = null;
        if (hasReferralRequirements) {
            referralRequirements = await this.raffleService.checkUserReferralRequirements(user.id, raffleId);
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, —Å—Ä–∞–∑—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ
        if (!hasChannelRequirements && !hasSocialRequirements && !hasReferralRequirements) {
            console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ: user.id=${user.id}, raffleId=${raffleId} (–±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π)`);
            await this.raffleService.addParticipant(user.id, raffleId, true);
            console.log(`‚úÖ –£—á–∞—Å—Ç–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ${raffleId}`);
            const successText = `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}
üìÖ –í—Ä–µ–º—è: ${raffle.end_date.toLocaleTimeString('ru-RU')}

‚úÖ *–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ*
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

üçÄ –£–¥–∞—á–∏! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!`;
            await ctx.editMessageText(successText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        if (hasChannelRequirements && !hasSocialRequirements) {
            await this.showSubscriptionChannels(ctx, raffle, channels);
            return;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if (hasSocialRequirements && !hasChannelRequirements) {
            await this.showSocialAccounts(ctx, raffle, socialAccounts);
            return;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∫–∞–Ω–∞–ª—ã, –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (hasChannelRequirements && hasSocialRequirements) {
            await this.showCombinedRequirements(ctx, raffle, channels, socialAccounts);
            return;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∫–∞–Ω–∞–ª–æ–≤)
        if (hasReferralRequirements && referralRequirements && !referralRequirements.hasEnoughReferrals) {
            const referralText = `üë• *–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${referralRequirements.currentReferrals}/${referralRequirements.requiredReferrals}
üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${referralRequirements.requiredReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

üí° *–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π:*
1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º
3Ô∏è‚É£ **–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è - –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!**

üéØ *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–Ω—Å–æ–≤:* +${Math.round((this.raffleService.calculateBonusMultiplier(referralRequirements.requiredReferrals) - 1) * 100)}% –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥—ã

üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*
\`https://t.me/${ctx.me.username}?start=REF${user.id}\``;
            await ctx.editMessageText(referralText, {
                parse_mode: 'Markdown',
                reply_markup: new InlineKeyboard()
                    .text('üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'referral_system')
                    .row()
                    .text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', `participate_${raffleId}`)
                    .row()
                    .text('üîô –ù–∞–∑–∞–¥', 'back_to_main')
            });
            return;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if (hasChannelRequirements && !hasReferralRequirements) {
            await this.showSubscriptionChannels(ctx, raffle, channels);
            return;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –∫–∞–Ω–∞–ª—ã, –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
        if (hasChannelRequirements && hasReferralRequirements && referralRequirements && referralRequirements.hasEnoughReferrals) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
            const channelText = channels.length === 1 ? '–∫–∞–Ω–∞–ª' : '–∫–∞–Ω–∞–ª—ã';
            let text = `üì∫ *–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${channelText}:*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}

‚úÖ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:* ${referralRequirements.currentReferrals}/${referralRequirements.requiredReferrals}
üéØ *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–Ω—Å–æ–≤:* +${Math.round((this.raffleService.calculateBonusMultiplier(referralRequirements.currentReferrals) - 1) * 100)}% –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥—ã

üì∫ *–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:*\n`;
            channels.forEach((channel, index) => {
                text += `${index + 1}. *${channel.name}*\n`;
                text += `   \`${channel.invite_link}\`\n\n`;
            });
            text += `üí° *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n`;
            text += `1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –Ω–∏–∂–µ\n`;
            text += `2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å\n`;
            text += `3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç\n`;
            text += `4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"\n`;
            text += `5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è`;
            const keyboard = new InlineKeyboard();
            // –î–æ–±–∞–≤–ª—è–µ–º URL-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            channels.forEach((channel, index) => {
                keyboard.url(`üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${channel.name}`, channel.invite_link);
                if ((index + 1) % 2 === 0)
                    keyboard.row();
            });
            keyboard.row().text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', `check_subscription_${raffle.id}`);
            keyboard.row().text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', 'active_raffles');
            await ctx.editMessageText(text, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
            return;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        if (!hasChannelRequirements && hasReferralRequirements && referralRequirements.hasEnoughReferrals) {
            console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ: user.id=${user.id}, raffleId=${raffleId} (—Ä–µ—Ñ–µ—Ä–∞–ª—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)`);
            await this.raffleService.addParticipant(user.id, raffleId, true);
            console.log(`‚úÖ –£—á–∞—Å—Ç–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ${raffleId}`);
            const successText = `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}
üìÖ –í—Ä–µ–º—è: ${raffle.end_date.toLocaleTimeString('ru-RU')}

‚úÖ *–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ*
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: ${referralRequirements.currentReferrals}/${referralRequirements.requiredReferrals}
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

üçÄ –£–¥–∞—á–∏! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!`;
            await ctx.editMessageText(successText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
    }
    async showSubscriptionChannels(ctx, raffle, channels) {
        const channelText = channels.length === 1 ? '–∫–∞–Ω–∞–ª' : '–∫–∞–Ω–∞–ª—ã';
        let text = `üì∫ *–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${channelText}:*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}`;
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (raffle.referral_requirement) {
            const user = await this.userService.getUserByTelegramId(ctx.from.id);
            if (user) {
                const referralRequirements = await this.raffleService.checkUserReferralRequirements(user.id, raffle.id);
                text += `\n\nüë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:* ${referralRequirements.currentReferrals}/${referralRequirements.requiredReferrals} –¥—Ä—É–∑–µ–π`;
                text += `\nüéØ *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–Ω—Å–æ–≤:* +${Math.round((this.raffleService.calculateBonusMultiplier(referralRequirements.requiredReferrals) - 1) * 100)}% –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥—ã`;
                text += `\nüí° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:* –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –≤—ã—à–µ –≤–∞—à —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É!`;
            }
        }
        text += `\n\nüì∫ *–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:*\n`;
        channels.forEach((channel, index) => {
            text += `${index + 1}. *${channel.name}*\n`;
            text += `   \`${channel.invite_link}\`\n\n`;
        });
        text += `üí° *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n`;
        text += `1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –Ω–∏–∂–µ\n`;
        text += `2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å\n`;
        text += `3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç\n`;
        text += `4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"\n`;
        if (raffle.referral_requirement) {
            text += `5Ô∏è‚É£ –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π`;
        }
        else {
            text += `5Ô∏è‚É£ –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è`;
        }
        const keyboard = new InlineKeyboard();
        // –î–æ–±–∞–≤–ª—è–µ–º URL-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        channels.forEach((channel, index) => {
            keyboard.url(`üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${channel.name}`, channel.invite_link);
            if ((index + 1) % 2 === 0)
                keyboard.row();
        });
        keyboard.row().text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', `check_subscription_${raffle.id}`);
        keyboard.row().text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', 'active_raffles');
        await ctx.editMessageText(text, {
            reply_markup: keyboard
        });
    }
    async handleSubscribeToChannel(ctx, channelId) {
        console.log(`üì∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ${channelId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        const channel = await this.channelService.getChannelById(channelId);
        if (!channel) {
            await ctx.answerCallbackQuery('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        if (user) {
            await this.analyticsService.trackEvent(AnalyticsEventType.USER_SUBSCRIBED_CHANNEL, user.id, undefined, channelId);
        }
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
        const keyboard = new InlineKeyboard();
        keyboard.url(`üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${channel.name}`, channel.invite_link);
        keyboard.row().text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', `check_subscription_${channelId}`);
        keyboard.row().text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', 'active_raffles');
        await ctx.editMessageText(`üì∫ *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª*

üéØ –ö–∞–Ω–∞–ª: *${channel.name}*
üîó –°—Å—ã–ª–∫–∞: \`${channel.invite_link}\`

üí° *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${channel.name}" –Ω–∏–∂–µ
2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å
3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"`, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
    async checkSubscriptionAndParticipate(ctx, raffleId) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${raffleId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from.id}`);
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user) {
            await ctx.answerCallbackQuery('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        const raffle = await this.raffleService.getRaffleById(raffleId);
        if (!raffle || raffle.status !== 'ACTIVE') {
            await ctx.editMessageText('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.', {
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        const channels = await this.channelService.getChannelsByRaffleId(raffleId);
        const unsubscribedChannels = [];
        for (const channel of channels) {
            try {
                const member = await this.bot.api.getChatMember(channel.telegram_channel_id, ctx.from.id);
                if (!['member', 'administrator', 'creator'].includes(member.status)) {
                    unsubscribedChannels.push(channel);
                }
            }
            catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ${channel.name}:`, error);
                unsubscribedChannels.push(channel);
            }
        }
        if (unsubscribedChannels.length > 0) {
            let text = `‚ùå *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}

üì∫ *–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞:*\n`;
            unsubscribedChannels.forEach((channel, index) => {
                text += `${index + 1}. *${channel.name}*\n`;
                text += `   \`${channel.invite_link}\`\n\n`;
            });
            text += `üí° *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:*\n`;
            text += `1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤—ã—à–µ\n`;
            text += `2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" —Å–Ω–æ–≤–∞`;
            const keyboard = new InlineKeyboard();
            unsubscribedChannels.forEach((channel, index) => {
                keyboard.text(`üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${channel.name}`, `subscribe_${channel.id}`);
                if ((index + 1) % 2 === 0)
                    keyboard.row();
            });
            keyboard.row().text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', `check_subscription_${raffle.id}`);
            keyboard.row().text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', 'active_raffles');
            await ctx.editMessageText(text, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
            return;
        }
        // –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if (raffle.referral_requirement) {
            const referralRequirements = await this.raffleService.checkUserReferralRequirements(user.id, raffleId);
            if (!referralRequirements.hasEnoughReferrals) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                const referralText = `‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${referralRequirements.currentReferrals}/${referralRequirements.requiredReferrals}
üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${referralRequirements.requiredReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

üí° *–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:*
1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º
3Ô∏è‚É£ **–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è - –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!**

üéØ *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–Ω—Å–æ–≤:* +${Math.round((this.raffleService.calculateBonusMultiplier(referralRequirements.requiredReferrals) - 1) * 100)}% –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥—ã
üí° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:* –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –≤—ã—à–µ –≤–∞—à —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É!

üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*
\`https://t.me/${ctx.me.username}?start=REF${user.id}\``;
                await ctx.editMessageText(referralText, {
                    parse_mode: 'Markdown',
                    reply_markup: new InlineKeyboard()
                        .text('üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', `referral_system_${raffleId}`)
                        .row()
                        .text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã', `check_referrals_${raffleId}`)
                        .row()
                        .text('üîô –ù–∞–∑–∞–¥', 'back_to_main')
                });
                return;
            }
            else {
                // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ
                console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ: user.id=${user.id}, raffleId=${raffleId} (–ø–æ–¥–ø–∏—Å–∫–∞ + —Ä–µ—Ñ–µ—Ä–∞–ª—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)`);
                await this.raffleService.addParticipant(user.id, raffleId, true);
                console.log(`‚úÖ –£—á–∞—Å—Ç–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ${raffleId}`);
                const successText = `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}
üìÖ –í—Ä–µ–º—è: ${raffle.end_date.toLocaleTimeString('ru-RU')}

‚úÖ *–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ*
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: ${referralRequirements.currentReferrals}/${referralRequirements.requiredReferrals}
üéØ *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–Ω—Å–æ–≤:* +${Math.round((this.raffleService.calculateBonusMultiplier(referralRequirements.currentReferrals) - 1) * 100)}% –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥—ã
üí° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:* –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –≤—ã—à–µ –≤–∞—à —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É!
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

üçÄ –£–¥–∞—á–∏! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!`;
                await ctx.editMessageText(successText, {
                    parse_mode: 'Markdown',
                    reply_markup: Keyboards.backToMain()
                });
                return;
            }
        }
        else {
            // –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ
            console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ: user.id=${user.id}, raffleId=${raffleId} (—Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∫–∞)`);
            await this.raffleService.addParticipant(user.id, raffleId, true);
            console.log(`‚úÖ –£—á–∞—Å—Ç–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ${raffleId}`);
            const successText = `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}
üìÖ –í—Ä–µ–º—è: ${raffle.end_date.toLocaleTimeString('ru-RU')}

‚úÖ *–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ*
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

üçÄ –£–¥–∞—á–∏! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!`;
            await ctx.editMessageText(successText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToMain()
            });
        }
    }
    async checkSubscriptions(ctx, raffleId) {
        await this.handleParticipation(ctx, raffleId);
    }
    async checkSocialSubscriptions(ctx, raffleId) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${raffleId}`);
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user)
            return;
        const raffle = await this.raffleService.getRaffleById(raffleId);
        if (!raffle)
            return;
        const socialAccounts = await this.socialAccountService.getSocialRequirementsForRaffle(raffleId);
        if (socialAccounts.length === 0)
            return;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        let allSubscribed = true;
        const subscriptionResults = [];
        for (const requirement of socialAccounts) {
            try {
                // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
                // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
                const subscribed = await this.socialAccountService.checkSocialSubscription(requirement.social_account.platform, requirement.social_account.username, user.telegram_id);
                subscriptionResults.push({ account: requirement.social_account, subscribed });
                if (!subscribed)
                    allSubscribed = false;
            }
            catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ${requirement.social_account.display_name}:`, error);
                subscriptionResults.push({ account: requirement.social_account, subscribed: false });
                allSubscribed = false;
            }
        }
        if (allSubscribed) {
            // –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ
            await this.raffleService.addParticipant(user.id, raffleId, true);
            const successText = `‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}

‚úÖ *–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ*
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

üçÄ –£–¥–∞—á–∏! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!`;
            await ctx.editMessageText(successText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToMain()
            });
        }
        else {
            // –ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            let resultText = `‚ùå *–ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}

üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:*\n`;
            subscriptionResults.forEach((result, index) => {
                const status = result.subscribed ? '‚úÖ' : '‚ùå';
                const icon = this.getPlatformIcon(result.account.platform);
                resultText += `${status} ${icon} ${result.account.display_name}\n`;
            });
            resultText += `\nüí° *–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã*`;
            await ctx.editMessageText(resultText, {
                parse_mode: 'Markdown',
                reply_markup: new InlineKeyboard()
                    .text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', `check_social_subscription_${raffleId}`)
                    .row()
                    .text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', 'active_raffles')
            });
        }
    }
    async checkCombinedSubscriptions(ctx, raffleId) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${raffleId}`);
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user)
            return;
        const raffle = await this.raffleService.getRaffleById(raffleId);
        if (!raffle)
            return;
        const channels = await this.channelService.getChannelsByRaffleId(raffleId);
        const socialAccounts = await this.socialAccountService.getSocialRequirementsForRaffle(raffleId);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        let allChannelsSubscribed = true;
        const channelResults = [];
        for (const channel of channels) {
            try {
                const isSubscribed = await this.bot.api.getChatMember(channel.telegram_channel_id, ctx.from.id);
                const subscribed = isSubscribed.status !== 'left' && isSubscribed.status !== 'kicked';
                channelResults.push({ channel, subscribed });
                if (!subscribed)
                    allChannelsSubscribed = false;
            }
            catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ${channel.name}:`, error);
                channelResults.push({ channel, subscribed: false });
                allChannelsSubscribed = false;
            }
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        let allSocialSubscribed = true;
        const socialResults = [];
        for (const requirement of socialAccounts) {
            try {
                const subscribed = await this.socialAccountService.checkSocialSubscription(requirement.social_account.platform, requirement.social_account.username, user.telegram_id);
                socialResults.push({ account: requirement.social_account, subscribed });
                if (!subscribed)
                    allSocialSubscribed = false;
            }
            catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ${requirement.social_account.display_name}:`, error);
                socialResults.push({ account: requirement.social_account, subscribed: false });
                allSocialSubscribed = false;
            }
        }
        if (allChannelsSubscribed && allSocialSubscribed) {
            // –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ
            await this.raffleService.addParticipant(user.id, raffleId, true);
            const successText = `‚úÖ *–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}

‚úÖ *–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ*
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

üçÄ –£–¥–∞—á–∏! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!`;
            await ctx.editMessageText(successText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToMain()
            });
        }
        else {
            // –ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            let resultText = `‚ùå *–ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}

üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:*\n`;
            if (channels.length > 0) {
                resultText += `üì∫ *–ö–∞–Ω–∞–ª—ã:*\n`;
                channelResults.forEach((result, index) => {
                    const status = result.subscribed ? '‚úÖ' : '‚ùå';
                    resultText += `${status} ${result.channel.name}\n`;
                });
                resultText += `\n`;
            }
            if (socialAccounts.length > 0) {
                resultText += `üì± *–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:*\n`;
                socialResults.forEach((result, index) => {
                    const status = result.subscribed ? '‚úÖ' : '‚ùå';
                    const icon = this.getPlatformIcon(result.account.platform);
                    resultText += `${status} ${icon} ${result.account.display_name}\n`;
                });
            }
            resultText += `\nüí° *–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã*`;
            await ctx.editMessageText(resultText, {
                parse_mode: 'Markdown',
                reply_markup: new InlineKeyboard()
                    .text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞', `check_combined_subscription_${raffleId}`)
                    .row()
                    .text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', 'active_raffles')
            });
        }
    }
    async showUserRaffles(ctx) {
        console.log(`üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user) {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: id=${user.id}, telegram_id=${user.telegram_id}`);
        const userRaffles = await this.raffleService.getUserParticipatedRaffles(user.id);
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${userRaffles.length} —É—á–∞—Å—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        if (userRaffles.length === 0) {
            const text = `üì≠ *–ú–æ–∏ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö*

–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ.

üéÅ –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à
3. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
4. –ù–∞–∂–º–∏—Ç–µ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"`;
            await ctx.editMessageText(text, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
        let text = `üìã *–ú–æ–∏ —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö:*\n\n`;
        userRaffles.slice(0, 10).forEach((raffle, index) => {
            const statusEmoji = raffle.status === 'ACTIVE' ? 'üü¢' :
                raffle.status === 'FINISHED' ? '‚úÖ' : '‚è∏Ô∏è';
            text += `${index + 1}. ${statusEmoji} *${raffle.prize_description}*\n`;
            text += `   üìÖ –°—Ç–∞—Ç—É—Å: ${this.getStatusText(raffle.status)}\n`;
            text += `   ‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}\n`;
            text += `   üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}\n\n`;
        });
        if (userRaffles.length > 10) {
            text += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ ${userRaffles.length} –∏–∑ ${userRaffles.length} —É—á–∞—Å—Ç–∏–π\n\n`;
        }
        text += `üí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToMain()
        });
    }
    getStatusText(status) {
        switch (status) {
            case 'ACTIVE': return '–ê–∫—Ç–∏–≤–Ω—ã–π';
            case 'FINISHED': return '–ó–∞–≤–µ—Ä—à–µ–Ω';
            case 'SCHEDULED': return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω';
            case 'CANCELED': return '–û—Ç–º–µ–Ω–µ–Ω';
            default: return status;
        }
    }
    async showActiveRaffles(ctx) {
        console.log(`üéÅ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        const activeRaffles = await this.raffleService.getActiveRaffles();
        if (activeRaffles.length === 0) {
            const noRafflesText = `üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.

üéâ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ - –Ω–æ–≤—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ!`;
            await this.sendMessage(ctx, noRafflesText, {
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
        let rafflesText = `üéÅ *–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:*\n\n`;
        for (let i = 0; i < activeRaffles.length; i++) {
            const raffle = activeRaffles[i];
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            const channels = await this.channelService.getChannelsByRaffleId(raffle.id);
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            const socialAccounts = await this.socialAccountService.getSocialRequirementsForRaffle(raffle.id);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ
            let participationStatus = '';
            if (user) {
                const isParticipating = await this.raffleService.isUserParticipating(user.id, raffle.id);
                participationStatus = isParticipating ? ' ‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ' : ' üÜï –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–∏—è';
            }
            rafflesText += `${i + 1}. *${raffle.prize_description}*${participationStatus}\n`;
            rafflesText += `   üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}\n`;
            rafflesText += `   üë• –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}\n`;
            rafflesText += `   ‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${new Date(raffle.end_date).toLocaleDateString('ru-RU')}\n`;
            if (channels.length > 0) {
                rafflesText += `   üì∫ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ${channels.length}\n`;
            }
            if (socialAccounts.length > 0) {
                rafflesText += `   üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏: ${socialAccounts.length}\n`;
            }
            if (raffle.referral_requirement) {
                rafflesText += `   üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: ${raffle.min_referrals} –¥—Ä—É–∑–µ–π\n`;
            }
            rafflesText += `\n`;
        }
        rafflesText += `üí° *–î–ª—è —É—á–∞—Å—Ç–∏—è:*\n`;
        rafflesText += `1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n`;
        rafflesText += `2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è\n`;
        rafflesText += `3Ô∏è‚É£ –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É\n`;
        rafflesText += `4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è`;
        const keyboard = new InlineKeyboard();
        activeRaffles.forEach((raffle, index) => {
            keyboard.text(`${index + 1}`, `view_raffle_${raffle.id}`);
            if ((index + 1) % 3 === 0)
                keyboard.row();
        });
        keyboard.row().text('üîô –ù–∞–∑–∞–¥', 'back_to_main');
        await this.sendMessage(ctx, rafflesText, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
    async showRaffleDetails(ctx, raffleId) {
        console.log(`üéÅ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${raffleId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        const raffle = await this.raffleService.getRaffleById(raffleId);
        if (!raffle) {
            await ctx.editMessageText('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        const channels = await this.channelService.getChannelsByRaffleId(raffle.id);
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        const socialAccounts = await this.socialAccountService.getSocialRequirementsForRaffle(raffle.id);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ
        let participationStatus = '';
        if (user) {
            const isParticipating = await this.raffleService.isUserParticipating(user.id, raffle.id);
            participationStatus = isParticipating ? ' ‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ' : ' üÜï –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–∏—è';
        }
        let raffleText = `üéÅ *–†–æ–∑—ã–≥—Ä—ã—à: ${raffle.prize_description}*${participationStatus}\n\n`;
        raffleText += `üéÅ *–ü—Ä–∏–∑:* ${raffle.prize_description}\n`;
        raffleText += `üë• *–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* ${raffle.winners_count}\n`;
        raffleText += `‚è∞ *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:* ${new Date(raffle.end_date).toLocaleDateString('ru-RU')}\n`;
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
        if (channels.length > 0) {
            raffleText += `üì∫ *–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:* ${channels.length}\n`;
        }
        if (socialAccounts.length > 0) {
            raffleText += `üì± *–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:* ${socialAccounts.length}\n`;
        }
        if (raffle.referral_requirement) {
            raffleText += `üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:* ${raffle.min_referrals} –¥—Ä—É–∑–µ–π\n`;
        }
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è
        let requirementsText = '';
        const hasChannels = channels.length > 0;
        const hasSocialAccounts = socialAccounts.length > 0;
        const hasReferrals = raffle.referral_requirement;
        if (hasReferrals && hasChannels && hasSocialAccounts) {
            // –†–æ–∑—ã–≥—Ä—ã—à —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏, –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏
            requirementsText = `üí° *–î–ª—è —É—á–∞—Å—Ç–∏—è:*\n`;
            requirementsText += `1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤\n`;
            requirementsText += `2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${socialAccounts.length} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n`;
            requirementsText += `3Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ ${raffle.min_referrals} –¥—Ä—É–∑–µ–π\n`;
            requirementsText += `4Ô∏è‚É£ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–∑–µ–π**\n`;
            requirementsText += `5Ô∏è‚É£ –£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;
        }
        else if (hasReferrals && hasChannels && !hasSocialAccounts) {
            // –†–æ–∑—ã–≥—Ä—ã—à —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª—ã
            requirementsText = `üí° *–î–ª—è —É—á–∞—Å—Ç–∏—è:*\n`;
            requirementsText += `1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤\n`;
            requirementsText += `2Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ ${raffle.min_referrals} –¥—Ä—É–∑–µ–π\n`;
            requirementsText += `3Ô∏è‚É£ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–∑–µ–π**\n`;
            requirementsText += `4Ô∏è‚É£ –£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;
        }
        else if (hasReferrals && !hasChannels && hasSocialAccounts) {
            // –†–æ–∑—ã–≥—Ä—ã—à —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏
            requirementsText = `üí° *–î–ª—è —É—á–∞—Å—Ç–∏—è:*\n`;
            requirementsText += `1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${socialAccounts.length} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n`;
            requirementsText += `2Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ ${raffle.min_referrals} –¥—Ä—É–∑–µ–π\n`;
            requirementsText += `3Ô∏è‚É£ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–∑–µ–π**\n`;
            requirementsText += `4Ô∏è‚É£ –£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`;
        }
        else if (hasReferrals && !hasChannels && !hasSocialAccounts) {
            // –†–æ–∑—ã–≥—Ä—ã—à —Ç–æ–ª—å–∫–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
            requirementsText = `üí° *–î–ª—è —É—á–∞—Å—Ç–∏—è:*\n`;
            requirementsText += `1Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ ${raffle.min_referrals} –¥—Ä—É–∑–µ–π\n`;
            requirementsText += `2Ô∏è‚É£ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–∑–µ–π**\n`;
            requirementsText += `3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è`;
        }
        else if (!hasReferrals && hasChannels && hasSocialAccounts) {
            // –†–æ–∑—ã–≥—Ä—ã—à —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏
            requirementsText = `üí° *–î–ª—è —É—á–∞—Å—Ç–∏—è:*\n`;
            requirementsText += `1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤\n`;
            requirementsText += `2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${socialAccounts.length} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n`;
            requirementsText += `3Ô∏è‚É£ –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫\n`;
            requirementsText += `4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è`;
        }
        else if (!hasReferrals && hasChannels && !hasSocialAccounts) {
            // –û–±—ã—á–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª—ã
            requirementsText = `üí° *–î–ª—è —É—á–∞—Å—Ç–∏—è:*\n`;
            requirementsText += `1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤\n`;
            requirementsText += `2Ô∏è‚É£ –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n`;
            requirementsText += `3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è`;
        }
        else if (!hasReferrals && !hasChannels && hasSocialAccounts) {
            // –†–æ–∑—ã–≥—Ä—ã—à —Ç–æ–ª—å–∫–æ —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏
            requirementsText = `üí° *–î–ª—è —É—á–∞—Å—Ç–∏—è:*\n`;
            requirementsText += `1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ ${socialAccounts.length} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n`;
            requirementsText += `2Ô∏è‚É£ –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫\n`;
            requirementsText += `3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è`;
        }
        else {
            // –†–æ–∑—ã–≥—Ä—ã—à –±–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            requirementsText = `üí° *–î–ª—è —É—á–∞—Å—Ç–∏—è:*\n`;
            requirementsText += `1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"\n`;
            requirementsText += `2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è`;
        }
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ —à–∞–Ω—Å–æ–≤ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        if (hasReferrals) {
            if (raffle.referral_bonus) {
                requirementsText += `\n\nüéÅ *–ë–æ–Ω—É—Å:* ${raffle.referral_bonus}`;
            }
            const multiplier = this.raffleService.calculateBonusMultiplier(raffle.min_referrals);
            const bonusPercent = Math.round((multiplier - 1) * 100);
            requirementsText += `\n\nüéØ *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–Ω—Å–æ–≤:* +${bonusPercent}% –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥—ã`;
            requirementsText += `\nüí° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:* –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –≤—ã—à–µ –≤–∞—à —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É!`;
        }
        raffleText += `\n${requirementsText}`;
        const keyboard = new InlineKeyboard();
        // –ö–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è
        if (user) {
            const isParticipating = await this.raffleService.isUserParticipating(user.id, raffle.id);
            if (!isParticipating) {
                keyboard.text('üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', `participate_${raffle.id}`);
            }
            else {
                keyboard.text('‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ', `participate_${raffle.id}`);
            }
        }
        keyboard.row().text('üîô –ö —Å–ø–∏—Å–∫—É —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π', 'active_raffles');
        keyboard.row().text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main');
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
        if (raffle.photo_file_id) {
            try {
                await ctx.replyWithPhoto(raffle.photo_file_id, {
                    caption: raffleText,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }
            catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:', error);
                await ctx.reply(raffleText, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ –ø—Ä–∏–∑–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –≤–∏–¥–µ–æ
        else if (raffle.video_file_id) {
            try {
                await ctx.replyWithVideo(raffle.video_file_id, {
                    caption: raffleText,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }
            catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', error);
                await ctx.reply(raffleText, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        else {
            await ctx.reply(raffleText, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
        }
    }
    async showHelp(ctx) {
        console.log(`‚ùì –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        const helpText = `‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*

üéÅ *–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö:*
1. –ù–∞–π–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –º–µ–Ω—é
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
3. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞

üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:*
‚Ä¢ üéÅ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
‚Ä¢ üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö —É—á–∞—Å—Ç–∏–π
‚Ä¢ üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö
‚Ä¢ ‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

üí° *–í–∞–∂–Ω–æ:* –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã-–ø–∞—Ä—Ç–Ω–µ—Ä—ã.`;
        await this.sendMessage(ctx, helpText, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToMain()
        });
    }
    async showOfficialChannel(ctx) {
        console.log(`üì¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        const officialChannel = await this.officialChannelService.getOfficialChannel();
        if (!officialChannel) {
            const noChannelText = `üì≠ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.

üéâ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!`;
            await this.sendMessage(ctx, noChannelText, {
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
        const text = `üì¢ *–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª*

üéØ *${officialChannel.name}*

üí¨ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏!

üîó \`${officialChannel.invite_link}\`

${officialChannel.description ? `üìù ${officialChannel.description}\n\n` : ''}üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª`;
        await this.sendMessage(ctx, text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToMain()
        });
    }
    async showMainMenu(ctx) {
        console.log(`üè† –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        const settings = await this.botSettingsService.getSettings();
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
        const activeRaffles = await this.raffleService.getActiveRaffles();
        const activeCount = activeRaffles.length;
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        let participationCount = 0;
        if (user) {
            const userRaffles = await this.raffleService.getUserParticipatedRaffles(user.id);
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
            const activeUserRaffles = userRaffles.filter((raffle) => raffle.status === 'ACTIVE' && new Date(raffle.end_date) > new Date());
            participationCount = activeUserRaffles.length;
        }
        const welcomeText = `${settings.welcome_message}

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ üéÅ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π: ${activeCount}
‚Ä¢ üìã –í–∞—à–∏—Ö —É—á–∞—Å—Ç–∏–π –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö: ${participationCount}

üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`;
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
        if (settings.cover_photo_file_id) {
            try {
                await ctx.replyWithPhoto(settings.cover_photo_file_id, {
                    caption: welcomeText,
                    parse_mode: 'Markdown',
                    reply_markup: Keyboards.mainUser(activeCount, participationCount)
                });
            }
            catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–ª–æ–∂–∫–∏:', error);
                await this.sendMessage(ctx, welcomeText, {
                    parse_mode: 'Markdown',
                    reply_markup: Keyboards.mainUser(activeCount, participationCount)
                });
            }
        }
        else {
            await this.sendMessage(ctx, welcomeText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.mainUser(activeCount, participationCount)
            });
        }
    }
    async handleAdminPanelAccess(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if (this.adminIds.includes(userId)) {
            console.log(`üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏`);
            const adminText = `üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
            await this.sendMessage(ctx, adminText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.adminMain()
            });
        }
        else {
            console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏`);
            const accessDeniedText = `‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω*

–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞.

üí° –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
            await this.sendMessage(ctx, accessDeniedText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToMain()
            });
        }
    }
    async showAdminOfficialChannel(ctx) {
        const text = `üì¢ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.adminOfficialChannel()
        });
    }
    async startAddOfficialChannel(ctx) {
        const userId = ctx.from.id;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        this.adminStates[userId] = {
            step: 'add_official_channel',
            tempData: {}
        };
        const text = `‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞*

üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`https://t.me/channel_name\`

üí° –≠—Ç–æ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –º–µ–Ω—é "–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.cancelAction()
        });
    }
    async showOfficialChannelInfo(ctx) {
        const officialChannel = await this.officialChannelService.getOfficialChannel();
        if (!officialChannel) {
            const text = `üì≠ *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*

üí° –î–æ–±–∞–≤—å—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ.`;
            await ctx.editMessageText(text, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        const text = `üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ*

üéØ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${officialChannel.name}
üîó *–°—Å—ã–ª–∫–∞:* \`${officialChannel.invite_link}\`
üìÖ *–î–æ–±–∞–≤–ª–µ–Ω:* ${new Date(officialChannel.created_at).toLocaleString('ru-RU')}
${officialChannel.description ? `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${officialChannel.description}\n` : ''}

üí° –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –º–µ–Ω—é "–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async deleteOfficialChannel(ctx) {
        await this.officialChannelService.deleteOfficialChannel();
        const text = `‚úÖ *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω*

üì≠ –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —É–≤–∏–¥—è—Ç –∫–Ω–æ–ø–∫—É "–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª" –≤ –º–µ–Ω—é.

üí° –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async handleAddOfficialChannel(ctx, text) {
        console.log('‚ûï –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞');
        console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:', text);
        try {
            // –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            const channelMatch = text.match(/https:\/\/t\.me\/([^\/\s]+)/);
            if (!channelMatch) {
                await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `https://t.me/channel_name`', {
                    parse_mode: 'Markdown',
                    reply_markup: Keyboards.cancelAction()
                });
                return;
            }
            const channelUsername = channelMatch[1];
            console.log('üì∫ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: Username=@' + channelUsername + ', Link=' + text);
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ Telegram API
            const chat = await this.bot.api.getChat(`@${channelUsername}`);
            console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ:', chat);
            if (chat.type !== 'channel') {
                await ctx.reply('‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º.', {
                    reply_markup: Keyboards.cancelAction()
                });
                return;
            }
            // –°–æ–∑–¥–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
            await this.officialChannelService.createOfficialChannel(chat.id.toString(), chat.title || 'Unknown Channel', text, chat.description);
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            delete this.adminStates[ctx.from.id];
            const successText = `‚úÖ *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*

üéØ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${chat.title}
üîó *–°—Å—ã–ª–∫–∞:* \`${text}\`
${chat.description ? `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${chat.description}\n` : ''}

üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é "–ù–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"`;
            await ctx.reply(successText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:', error);
            let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.';
            if (error instanceof Error) {
                if (error.message.includes('chat not found')) {
                    errorMessage = '‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—É–±–ª–∏—á–Ω—ã–π.';
                }
                else if (error.message.includes('Forbidden')) {
                    errorMessage = '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.';
                }
                else {
                    errorMessage = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
                }
            }
            await ctx.reply(errorMessage, {
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    async startEditOfficialChannelDescription(ctx) {
        const officialChannel = await this.officialChannelService.getOfficialChannel();
        if (!officialChannel) {
            const text = `‚ùå *–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*

üí° –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª, –∞ –∑–∞—Ç–µ–º —Å–º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ.`;
            await ctx.editMessageText(text, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        const userId = ctx.from.id;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        this.adminStates[userId] = {
            step: 'edit_official_channel_description',
            tempData: {
                channelId: officialChannel.id
            }
        };
        const currentDescription = officialChannel.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ';
        const text = `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞*

üéØ *–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:* ${officialChannel.name}
üìù *–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* ${currentDescription}

üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:

üí° –û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.cancelAction()
        });
    }
    async handleEditOfficialChannelDescription(ctx, text) {
        console.log('‚úèÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞');
        console.log('üìù –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', text);
        try {
            const userId = ctx.from.id;
            const state = this.adminStates[userId];
            const channelId = state.tempData.channelId;
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
            const officialChannel = await this.officialChannelService.getOfficialChannel();
            if (!officialChannel || officialChannel.id !== channelId) {
                await ctx.reply('‚ùå –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.', {
                    reply_markup: Keyboards.backToAdmin()
                });
                return;
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            await this.officialChannelService.updateOfficialChannel(officialChannel.id, officialChannel.telegram_channel_id, officialChannel.name, officialChannel.invite_link, text);
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            delete this.adminStates[userId];
            const successText = `‚úÖ *–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*

üéØ *–ö–∞–Ω–∞–ª:* ${officialChannel.name}
üìù *–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:* ${text}

üí° –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.`;
            await ctx.reply(successText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    async showMailingsToDelete(ctx) {
        const mailings = await this.mailingService.getAllMailings();
        if (mailings.length === 0) {
            await ctx.editMessageText('üì≠ –†–∞—Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', {
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        const text = `üóëÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n\nüìä –°—Ç–∞—Ç—É—Å—ã:\n‚è∞ - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞\nüì§ - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è\n‚úÖ - –ó–∞–≤–µ—Ä—à–µ–Ω–∞\n‚ùå - –û—Ç–º–µ–Ω–µ–Ω–∞`;
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.mailingsToDelete(mailings)
        });
    }
    async handleDeleteMailing(ctx, mailingId) {
        try {
            const mailing = await this.mailingService.getMailingById(mailingId);
            if (!mailing) {
                await ctx.answerCallbackQuery('‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            await this.mailingService.deleteMailing(mailingId);
            await ctx.answerCallbackQuery('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
            const statusEmoji = mailing.status === 'COMPLETED' ? '‚úÖ' :
                mailing.status === 'SENDING' ? 'üì§' :
                    mailing.status === 'SCHEDULED' ? '‚è∞' : '‚ùå';
            await ctx.editMessageText(`üóëÔ∏è *–†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞:*\n\n${statusEmoji} *${mailing.message_text.substring(0, 100)}...*\n\nüìä –°—Ç–∞—Ç—É—Å: ${this.getMailingStatusText(mailing.status)}\nüìà –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${mailing.sent_count}, –û—à–∏–±–æ–∫: ${mailing.failed_count}\nüìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(mailing.created_at).toLocaleDateString('ru-RU')}\n\n‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏');
            await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.', {
                reply_markup: Keyboards.backToAdmin()
            });
        }
    }
    async handleMailingPhoto(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (!ctx.message?.photo || ctx.message.photo.length === 0) {
            await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!', {
                reply_markup: Keyboards.cancelAction()
            });
            return;
        }
        // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        const photo = ctx.message.photo[ctx.message.photo.length - 1];
        state.tempData.photoFileId = photo.file_id;
        await ctx.reply('‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', {
            reply_markup: Keyboards.mailingScheduleSelection()
        });
    }
    async handleMailingVideo(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (!ctx.message?.video) {
            await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ!', {
                reply_markup: Keyboards.cancelAction()
            });
            return;
        }
        state.tempData.videoFileId = ctx.message.video.file_id;
        await ctx.reply('‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', {
            reply_markup: Keyboards.mailingScheduleSelection()
        });
    }
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞
    async startEditWelcomeMessage(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId] = {
            step: 'edit_welcome_message',
            tempData: {}
        };
        await this.sendMessage(ctx, '‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è*\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.cancelAction()
        });
    }
    async startAddCoverPhoto(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId] = {
            step: 'add_cover_photo',
            tempData: {}
        };
        await this.sendMessage(ctx, 'üñºÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –±–æ—Ç–∞*\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.cancelAction()
        });
    }
    async removeCoverPhoto(ctx) {
        try {
            await this.botSettingsService.removeCoverPhoto();
            await ctx.answerCallbackQuery('‚úÖ –û–±–ª–æ–∂–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
            await this.sendMessage(ctx, 'üóëÔ∏è *–û–±–ª–æ–∂–∫–∞ —É–¥–∞–ª–µ–Ω–∞*\n\n‚úÖ –û–±–ª–æ–∂–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n\nüí° –¢–µ–ø–µ—Ä—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏:', error);
            await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏');
            await this.sendMessage(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏.', {
                reply_markup: Keyboards.backToAdmin()
            });
        }
    }
    async handleEditWelcomeMessageText(ctx, text) {
        try {
            await this.botSettingsService.updateWelcomeMessage(text);
            await ctx.reply('‚úÖ *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*\n\nüìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n' + text, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (ctx.from) {
                delete this.adminStates[ctx.from.id];
            }
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', {
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    async handleCoverPhoto(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (!ctx.message?.photo || ctx.message.photo.length === 0) {
            await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!', {
                reply_markup: Keyboards.cancelAction()
            });
            return;
        }
        try {
            // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            const photo = ctx.message.photo[ctx.message.photo.length - 1];
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            await this.botSettingsService.updateCoverPhoto(photo.file_id);
            await ctx.reply('‚úÖ *–û–±–ª–æ–∂–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\nüñºÔ∏è –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            delete this.adminStates[userId];
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏ –±–æ—Ç–∞:', error);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏ –±–æ—Ç–∞.', {
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏
    async handleRaffleTypeSelection(ctx, type) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId].tempData.raffleType = type;
        if (type === 'referral') {
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–æ–∑—ã–≥—Ä—ã—à —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            this.adminStates[userId].step = 'create_raffle_referral_requirements';
            await ctx.editMessageText('üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ:', {
                reply_markup: Keyboards.referralRequirementSelection()
            });
        }
        else {
            // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
            this.adminStates[userId].step = 'create_raffle_title';
            await ctx.editMessageText('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', {
                reply_markup: Keyboards.cancelAction()
            });
        }
    }
    async handleReferralRequirementSelection(ctx, requirement) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId].tempData.referralRequirement = requirement;
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
        switch (requirement) {
            case 'both':
                this.adminStates[userId].tempData.referralRequirement = true;
                this.adminStates[userId].tempData.minReferrals = 1;
                this.adminStates[userId].tempData.maxReferrals = 5;
                this.adminStates[userId].tempData.referralBonus = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É';
                break;
            case 'subscription':
                this.adminStates[userId].tempData.referralRequirement = false;
                this.adminStates[userId].tempData.minReferrals = 0;
                this.adminStates[userId].tempData.maxReferrals = 0;
                break;
            case 'referrals':
                this.adminStates[userId].tempData.referralRequirement = true;
                this.adminStates[userId].tempData.minReferrals = 2;
                this.adminStates[userId].tempData.maxReferrals = 10;
                this.adminStates[userId].tempData.referralBonus = 'VIP —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç';
                break;
        }
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        this.adminStates[userId].step = 'create_raffle_referral_count';
        await ctx.editMessageText(`üë• –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: ${this.adminStates[userId].tempData.minReferrals}):`, {
            reply_markup: Keyboards.cancelAction()
        });
    }
    async handleCreateRaffleReferralCount(ctx, text) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const minReferrals = parseInt(text);
        if (isNaN(minReferrals) || minReferrals < 0) {
            await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 0):');
            return;
        }
        this.adminStates[userId].tempData.minReferrals = minReferrals;
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        this.adminStates[userId].step = 'create_raffle_title';
        await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:');
    }
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    async showReferralSystem(ctx) {
        if (!ctx.from)
            return;
        await ctx.editMessageText('üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\nüéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.referralMain()
        });
    }
    // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    async showReferralSystemWithContext(ctx, raffleId) {
        if (!ctx.from)
            return;
        const raffle = await this.raffleService.getRaffleById(raffleId);
        if (!raffle) {
            await ctx.editMessageText('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
        await ctx.editMessageText(`üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*\n\nüéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\nüéØ *–†–æ–∑—ã–≥—Ä—ã—à:* ${raffle.prize_description}\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.referralMainWithContext(raffleId)
        });
    }
    async showReferralLink(ctx) {
        if (!ctx.from)
            return;
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user)
            return;
        const referralCode = await this.referralService.getOrCreateReferralCode(user.id);
        const link = this.referralService.getReferralLink(user.id);
        await ctx.editMessageText(`üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞*\n\nüìã –ö–æ–¥: \`${referralCode.code}\`\nüîó –°—Å—ã–ª–∫–∞: \`${link}\`\n\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralCode.usage_count} –¥—Ä—É–∑–µ–π\n\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!`, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.referralLink(referralCode.code, link)
        });
    }
    async showReferralStats(ctx) {
        if (!ctx.from)
            return;
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user)
            return;
        const stats = await this.referralService.getUserReferralStats(user.id);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        await ctx.answerCallbackQuery(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.totalReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
        await ctx.editMessageText(`üìä *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\nüë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.totalReferrals}\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.activeReferrals}\nüéÅ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${stats.bonusClaimed}\n\nüîó –í–∞—à –∫–æ–¥: \`${stats.referralCode}\``, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.referralStats(stats)
        });
    }
    async showReferralList(ctx) {
        if (!ctx.from)
            return;
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user)
            return;
        const referrals = await this.referralService.getUserReferrals(user.id);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        await ctx.answerCallbackQuery(`üë• –°–ø–∏—Å–æ–∫: ${referrals.length} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤`);
        if (referrals.length === 0) {
            await ctx.editMessageText('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\nüí° –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!', {
                reply_markup: Keyboards.referralList()
            });
            return;
        }
        let text = 'üë• *–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:*\n\n';
        referrals.forEach((referral, index) => {
            const status = referral.is_active ? '‚úÖ' : '‚ùå';
            const bonus = referral.bonus_claimed ? 'üéÅ' : '';
            text += `${index + 1}. ${status} ${referral.first_name} ${bonus}\n`;
            text += `   üìÖ ${referral.created_at.toLocaleDateString('ru-RU')}\n\n`;
        });
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.referralList()
        });
    }
    async showReferralTop(ctx) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω
        await ctx.answerCallbackQuery('üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');
        const topReferrers = await this.analyticsService.getReferralStats();
        let text = 'üèÜ *–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n\n';
        topReferrers.topReferrers.forEach((referrer, index) => {
            text += `${index + 1}. ${referrer.name} - ${referrer.referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
        });
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.referralTop()
        });
    }
    async copyReferralLink(ctx) {
        await ctx.answerCallbackQuery('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }
    async shareReferralLink(ctx) {
        await ctx.answerCallbackQuery('üì§ –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!');
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    async checkReferralRequirements(ctx, raffleId) {
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user)
            return;
        const raffle = await this.raffleService.getRaffleById(raffleId);
        if (!raffle) {
            await ctx.editMessageText('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
                reply_markup: Keyboards.backToMain()
            });
            return;
        }
        const referralRequirements = await this.raffleService.checkUserReferralRequirements(user.id, raffleId);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        const statusText = referralRequirements.hasEnoughReferrals
            ? `‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralRequirements.currentReferrals}/${referralRequirements.requiredReferrals}`
            : `‚è≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralRequirements.currentReferrals}/${referralRequirements.requiredReferrals}`;
        await ctx.answerCallbackQuery(statusText);
        if (referralRequirements.hasEnoughReferrals) {
            // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ
            console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ: user.id=${user.id}, raffleId=${raffleId} (—Ä–µ—Ñ–µ—Ä–∞–ª—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)`);
            await this.raffleService.addParticipant(user.id, raffleId, true);
            console.log(`‚úÖ –£—á–∞—Å—Ç–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ${raffleId}`);
            const successText = `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}
üìÖ –í—Ä–µ–º—è: ${raffle.end_date.toLocaleTimeString('ru-RU')}

‚úÖ *–í–∞—à–µ —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ*
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: ${referralRequirements.currentReferrals}/${referralRequirements.requiredReferrals}
üéØ *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–Ω—Å–æ–≤:* +${Math.round((this.raffleService.calculateBonusMultiplier(referralRequirements.currentReferrals) - 1) * 100)}% –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥—ã
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

üçÄ –£–¥–∞—á–∏! –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º!`;
            await ctx.editMessageText(successText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToMain()
            });
        }
        else {
            // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            const referralText = `‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}

üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${referralRequirements.currentReferrals}/${referralRequirements.requiredReferrals}
üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${referralRequirements.requiredReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

üí° *–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:*
1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º
3Ô∏è‚É£ **–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è - –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!**

üéØ *–ú–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–Ω—Å–æ–≤:* +${Math.round((this.raffleService.calculateBonusMultiplier(referralRequirements.requiredReferrals) - 1) * 100)}% –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥—ã
üí° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:* –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ, —Ç–µ–º –≤—ã—à–µ –≤–∞—à —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É!

üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*
\`https://t.me/${ctx.me.username}?start=REF${user.id}\``;
            await this.sendMessage(ctx, referralText, {
                parse_mode: 'Markdown',
                reply_markup: new InlineKeyboard()
                    .text('üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', 'referral_system')
                    .row()
                    .text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã', `check_referrals_${raffleId}`)
                    .row()
                    .text('üîô –ù–∞–∑–∞–¥', 'back_to_main')
            });
        }
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π, –≤ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω
    async getAutoEnrolledRaffles(userId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userRaffles = await this.raffleService.getUserParticipatedRaffles(userId);
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
            const autoEnrolledRaffles = userRaffles.filter(raffle => raffle.status === 'ACTIVE' &&
                new Date(raffle.end_date) > new Date());
            return autoEnrolledRaffles;
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:', error);
            return [];
        }
    }
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    async showReferralLinkWithContext(ctx, raffleId) {
        if (!ctx.from)
            return;
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user)
            return;
        const referralCode = await this.referralService.getOrCreateReferralCode(user.id);
        const link = this.referralService.getReferralLink(user.id);
        await this.sendMessage(ctx, `üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞*\n\nüìã –ö–æ–¥: \`${referralCode.code}\`\nüîó –°—Å—ã–ª–∫–∞: \`${link}\`\n\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralCode.usage_count} –¥—Ä—É–∑–µ–π\n\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!`, {
            parse_mode: 'Markdown',
            reply_markup: new InlineKeyboard()
                .text('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', 'referral_copy_link')
                .row()
                .text('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', 'referral_share')
                .row()
                .text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É', `check_referrals_${raffleId}`)
        });
    }
    async showReferralStatsWithContext(ctx, raffleId) {
        if (!ctx.from)
            return;
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user)
            return;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
        await ctx.answerCallbackQuery('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        const stats = await this.referralService.getUserReferralStats(user.id);
        await this.sendMessage(ctx, `üìä *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\nüë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.totalReferrals}\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${stats.activeReferrals}\nüéÅ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${stats.bonusClaimed}\n\nüîó –í–∞—à –∫–æ–¥: \`${stats.referralCode}\``, {
            parse_mode: 'Markdown',
            reply_markup: new InlineKeyboard()
                .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `referral_stats_${raffleId}`)
                .row()
                .text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É', `check_referrals_${raffleId}`)
        });
    }
    async showReferralListWithContext(ctx, raffleId) {
        if (!ctx.from)
            return;
        const user = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!user)
            return;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω
        await ctx.answerCallbackQuery('üë• –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');
        const referrals = await this.referralService.getUserReferrals(user.id);
        if (referrals.length === 0) {
            await this.sendMessage(ctx, 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\nüí° –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!', {
                reply_markup: new InlineKeyboard()
                    .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `referral_list_${raffleId}`)
                    .row()
                    .text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É', `check_referrals_${raffleId}`)
            });
            return;
        }
        let text = 'üë• *–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:*\n\n';
        referrals.forEach((referral, index) => {
            const status = referral.is_active ? '‚úÖ' : '‚ùå';
            const bonus = referral.bonus_claimed ? 'üéÅ' : '';
            text += `${index + 1}. ${status} ${referral.first_name} ${bonus}\n`;
            text += `   üìÖ ${referral.created_at.toLocaleDateString('ru-RU')}\n\n`;
        });
        await this.sendMessage(ctx, text, {
            parse_mode: 'Markdown',
            reply_markup: new InlineKeyboard()
                .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `referral_list_${raffleId}`)
                .row()
                .text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É', `check_referrals_${raffleId}`)
        });
    }
    async showReferralTopWithContext(ctx, raffleId) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω
        await ctx.answerCallbackQuery('üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');
        const topReferrers = await this.analyticsService.getReferralStats();
        let text = 'üèÜ *–¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n\n';
        topReferrers.topReferrers.forEach((referrer, index) => {
            text += `${index + 1}. ${referrer.name} - ${referrer.referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
        });
        await this.sendMessage(ctx, text, {
            parse_mode: 'Markdown',
            reply_markup: new InlineKeyboard()
                .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `referral_top_${raffleId}`)
                .row()
                .text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É', `check_referrals_${raffleId}`)
        });
    }
    // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–¶–ò–ê–õ–¨–ù–´–• –°–ï–¢–ï–ô =====
    async showAdminSocial(ctx) {
        if (!ctx.from)
            return;
        const message = `üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏\n\n` +
            `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, ` +
            `–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        await this.sendMessage(ctx, message, {
            reply_markup: Keyboards.adminSocial()
        });
    }
    async startAddSocialAccount(ctx) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        this.adminStates[userId] = {
            step: 'add_social_platform',
            tempData: {}
        };
        const message = `üì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:`;
        await this.sendMessage(ctx, message, {
            reply_markup: Keyboards.socialPlatformSelection()
        });
    }
    async showSocialAccountsList(ctx) {
        if (!ctx.from)
            return;
        const accounts = await this.socialAccountService.getAllSocialAccounts();
        if (accounts.length === 0) {
            const message = `üì± –°–ø–∏—Å–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n` +
                `‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n` +
                `–ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.`;
            await this.sendMessage(ctx, message, {
                reply_markup: Keyboards.adminSocial()
            });
            return;
        }
        let message = `üì± –°–ø–∏—Å–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n`;
        accounts.forEach((account, index) => {
            const platformIcon = this.getPlatformIcon(account.platform);
            const verifiedBadge = account.is_verified ? '‚úÖ' : '';
            const followerCount = account.follower_count ? ` (${account.follower_count.toLocaleString()} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)` : '';
            message += `${index + 1}. ${platformIcon} @${account.username}${verifiedBadge}\n`;
            message += `   üìù ${account.display_name}${followerCount}\n`;
            message += `   üîó ${account.profile_url}\n\n`;
        });
        await this.sendMessage(ctx, message, {
            reply_markup: Keyboards.socialAccountsList(accounts)
        });
    }
    async showSocialAccountsStats(ctx) {
        if (!ctx.from)
            return;
        const stats = await this.socialAccountService.getSocialAccountsStats();
        let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π\n\n`;
        message += `üì± –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${stats.totalAccounts}\n`;
        message += `‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats.verifiedAccounts}\n`;
        message += `üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${stats.totalFollowers.toLocaleString()}\n\n`;
        if (stats.accountsByPlatform.length > 0) {
            message += `üìà –ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:\n`;
            stats.accountsByPlatform.forEach(platform => {
                const icon = this.getPlatformIcon(platform.platform);
                message += `${icon} ${platform.platform}: ${platform.count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n`;
            });
        }
        await this.sendMessage(ctx, message, {
            reply_markup: Keyboards.adminSocial()
        });
    }
    async showSocialAccounts(ctx, raffle, socialAccounts) {
        console.log(`üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ ${raffle.id}`);
        let text = `üì± –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}

üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n`;
        socialAccounts.forEach((account, index) => {
            const icon = this.getPlatformIcon(account.platform);
            text += `${index + 1}. ${icon} ${account.display_name}\n`;
            text += `   @${account.username}\n`;
            text += `   ${account.profile_url}\n\n`;
        });
        text += `üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n`;
        text += `1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –Ω–∏–∂–µ\n`;
        text += `2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å\n`;
        text += `3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç\n`;
        text += `4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"\n`;
        text += `5Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è`;
        const keyboard = new InlineKeyboard();
        // –î–æ–±–∞–≤–ª—è–µ–º URL-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        socialAccounts.forEach((account, index) => {
            const icon = this.getPlatformIcon(account.platform);
            keyboard.url(`${icon} –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${account.display_name}`, account.profile_url);
            if ((index + 1) % 2 === 0)
                keyboard.row();
        });
        keyboard.row().text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', `check_social_subscription_${raffle.id}`);
        keyboard.row().text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', 'active_raffles');
        await ctx.editMessageText(text, {
            reply_markup: keyboard
        });
    }
    async showCombinedRequirements(ctx, raffle, channels, socialAccounts) {
        console.log(`üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ${raffle.id}`);
        let text = `üì± –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:

üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleDateString('ru-RU')}

üì∫ –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n`;
        channels.forEach((channel, index) => {
            text += `${index + 1}. ${channel.name}\n`;
            text += `   ${channel.invite_link}\n\n`;
        });
        text += `üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n`;
        socialAccounts.forEach((requirement, index) => {
            const icon = this.getPlatformIcon(requirement.social_account.platform);
            text += `${index + 1}. ${icon} ${requirement.social_account.display_name}\n`;
            text += `   @${requirement.social_account.username}\n`;
            text += `   ${requirement.social_account.profile_url}\n\n`;
        });
        text += `üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n`;
        text += `1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n`;
        text += `2Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç\n`;
        text += `3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏"\n`;
        text += `4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è`;
        const keyboard = new InlineKeyboard();
        // –î–æ–±–∞–≤–ª—è–µ–º URL-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        channels.forEach((channel, index) => {
            keyboard.url(`üì∫ ${channel.name}`, channel.invite_link);
            if ((index + 1) % 2 === 0)
                keyboard.row();
        });
        // –î–æ–±–∞–≤–ª—è–µ–º URL-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        socialAccounts.forEach((requirement, index) => {
            const icon = this.getPlatformIcon(requirement.social_account.platform);
            keyboard.url(`${icon} ${requirement.social_account.display_name}`, requirement.social_account.profile_url);
            if ((index + 1) % 2 === 0)
                keyboard.row();
        });
        keyboard.row().text('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏', `check_combined_subscription_${raffle.id}`);
        keyboard.row().text('üîô –ù–∞–∑–∞–¥ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º', 'active_raffles');
        await ctx.editMessageText(text, {
            reply_markup: keyboard
        });
    }
    getPlatformIcon(platform) {
        const icons = {
            'INSTAGRAM': 'üì∏',
            'TIKTOK': 'üéµ',
            'TWITTER': 'üê¶',
            'FACEBOOK': 'üìò',
            'YOUTUBE': 'üì∫',
            'TELEGRAM': 'üì±'
        };
        return icons[platform] || 'üì±';
    }
    async handleSocialPlatformSelection(ctx, platform) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        if (!state || state.step !== 'add_social_platform') {
            console.log(`‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${state?.step}`);
            return;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        state.step = 'add_social_username';
        state.tempData = { ...state.tempData, platform };
        const platformIcon = this.getPlatformIcon(platform);
        const message = `üì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ${platformIcon} ${platform}\n\n` +
            `–í–≤–µ–¥–∏—Ç–µ username –∞–∫–∫–∞—É–Ω—Ç–∞ (–±–µ–∑ @):\n\n` +
            `–ü—Ä–∏–º–µ—Ä: mychannel`;
        await this.sendMessage(ctx, message, {
            reply_markup: new InlineKeyboard()
                .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')
                .row()
                .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
        });
    }
    async handleSocialUsernameInput(ctx, username) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        if (!state || state.step !== 'add_social_username') {
            console.log(`‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ username: ${state?.step}`);
            return;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º username –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        state.step = 'add_social_display_name';
        state.tempData = { ...state.tempData, username };
        const message = `üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n` +
            `–ü—Ä–∏–º–µ—Ä: –ú–æ—è –∫–æ–º–ø–∞–Ω–∏—è`;
        await this.sendMessage(ctx, message, {
            reply_markup: new InlineKeyboard()
                .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')
                .row()
                .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
        });
    }
    async handleSocialDisplayNameInput(ctx, displayName) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        if (!state || state.step !== 'add_social_display_name') {
            console.log(`‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ display_name: ${state?.step}`);
            return;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º display_name –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        state.step = 'add_social_profile_url';
        state.tempData = { ...state.tempData, display_name: displayName };
        const message = `üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:\n\n` +
            `–ü—Ä–∏–º–µ—Ä: https://instagram.com/mychannel`;
        await this.sendMessage(ctx, message, {
            reply_markup: new InlineKeyboard()
                .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')
                .row()
                .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
        });
    }
    async handleSocialProfileUrlInput(ctx, profileUrl) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        if (!state || state.step !== 'add_social_profile_url') {
            console.log(`‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ profile_url: ${state?.step}`);
            return;
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º profile_url –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        state.step = 'add_social_follower_count';
        state.tempData = { ...state.tempData, profile_url: profileUrl };
        const message = `üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ):\n\n` +
            `–ü—Ä–∏–º–µ—Ä: 1000`;
        await this.sendMessage(ctx, message, {
            reply_markup: new InlineKeyboard()
                .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')
                .row()
                .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
        });
    }
    async handleSocialFollowerCountInput(ctx, followerCountText) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        if (!state || state.step !== 'add_social_follower_count') {
            console.log(`‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ follower_count: ${state?.step}`);
            return;
        }
        const followerCount = parseInt(followerCountText) || 0;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º follower_count –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —à–∞–≥—É
        state.step = 'add_social_verified';
        state.tempData = { ...state.tempData, follower_count: followerCount };
        const message = `‚úÖ –ê–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω?\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:`;
        await this.sendMessage(ctx, message, {
            reply_markup: new InlineKeyboard()
                .text('‚úÖ –î–∞', 'social_verified_yes')
                .row()
                .text('‚ùå –ù–µ—Ç', 'social_verified_no')
                .row()
                .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action')
                .row()
                .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
        });
    }
    async handleSocialVerifiedSelection(ctx, isVerified) {
        if (!ctx.from)
            return;
        const userId = ctx.from.id;
        const state = this.adminStates[userId];
        if (!state || state.step !== 'add_social_verified') {
            console.log(`‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${state?.step}`);
            return;
        }
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            const socialAccount = await this.socialAccountService.createSocialAccount(state.tempData.platform, state.tempData.username, state.tempData.display_name, state.tempData.profile_url, state.tempData.follower_count, isVerified);
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            delete this.adminStates[userId];
            const platformIcon = this.getPlatformIcon(socialAccount.platform);
            const verifiedBadge = socialAccount.is_verified ? '‚úÖ' : '';
            const followerCount = socialAccount.follower_count ? ` (${socialAccount.follower_count.toLocaleString()} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)` : '';
            const message = `‚úÖ –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
                `${platformIcon} @${socialAccount.username}${verifiedBadge}\n` +
                `üìù ${socialAccount.display_name}${followerCount}\n` +
                `üîó ${socialAccount.profile_url}`;
            await this.sendMessage(ctx, message, {
                reply_markup: new InlineKeyboard()
                    .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ', 'social_add')
                    .row()
                    .text('üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', 'social_list')
                    .row()
                    .text('üîô –ù–∞–∑–∞–¥', 'admin_social')
                    .row()
                    .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
            await this.sendMessage(ctx, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
                reply_markup: new InlineKeyboard()
                    .text('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'social_add')
                    .row()
                    .text('üîô –ù–∞–∑–∞–¥', 'admin_social')
                    .row()
                    .text('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_main')
            });
        }
    }
}
//# sourceMappingURL=userHandlers.js.map