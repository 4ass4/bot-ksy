import { InlineKeyboard } from 'grammy';
import { Keyboards } from '../keyboards.js';
import { MailingType, RaffleStatus } from '../../types/index.js';
export class AdminHandlers {
    bot;
    userService;
    channelService;
    raffleService;
    mailingService;
    adminStates = {};
    constructor(bot, userService, channelService, raffleService, mailingService) {
        this.bot = bot;
        this.userService = userService;
        this.channelService = channelService;
        this.raffleService = raffleService;
        this.mailingService = mailingService;
    }
    register() {
        // –ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        this.bot.command('admin', async (ctx) => {
            console.log(`üîß –ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
            const user = await this.userService.getUserByTelegramId(ctx.from.id);
            if (!user?.is_admin) {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
            }
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏`);
            await ctx.reply('üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.mainAdmin()
            });
        });
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        this.bot.on('callback_query:data', async (ctx) => {
            const data = ctx.callbackQuery.data;
            console.log(`üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
            const user = await this.userService.getUserByTelegramId(ctx.from.id);
            if (!user?.is_admin) {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                return ctx.answerCallbackQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
            }
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞ ${ctx.from.id}: ${data}`);
            await ctx.answerCallbackQuery();
            try {
                switch (data) {
                    case 'back_admin':
                        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ back_admin`);
                        await this.showMainAdminMenu(ctx);
                        break;
                    case 'admin_channels':
                        console.log(`üì∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_channels`);
                        await this.showChannelsMenu(ctx);
                        break;
                    case 'admin_raffles':
                        console.log(`üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_raffles`);
                        await this.showRafflesMenu(ctx);
                        break;
                    case 'admin_mailings':
                        console.log(`üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_mailings`);
                        await this.showMailingsMenu(ctx);
                        break;
                    case 'admin_stats':
                        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_stats`);
                        await this.showStats(ctx);
                        break;
                    case 'admin_settings':
                        console.log(`‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ admin_settings`);
                        await this.showSettings(ctx);
                        break;
                    case 'channels_add':
                        console.log(`‚ûï –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ channels_add`);
                        await this.startAddChannel(ctx);
                        break;
                    case 'channels_list':
                        console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ channels_list`);
                        await this.showChannelsList(ctx);
                        break;
                    case 'raffles_create':
                        console.log(`üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ raffles_create`);
                        await this.startCreateRaffle(ctx);
                        break;
                    case 'raffles_active':
                        console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ raffles_active`);
                        await this.showActiveRaffles(ctx);
                        break;
                    case 'raffles_finished':
                        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ raffles_finished`);
                        await this.showFinishedRaffles(ctx);
                        break;
                    case 'mailings_create':
                        console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ mailings_create`);
                        await this.startCreateMailing(ctx);
                        break;
                    case 'mailings_list':
                        console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ mailings_list`);
                        await this.showMailingsList(ctx);
                        break;
                    case 'cancel_action':
                        console.log(`‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ cancel_action`);
                        await this.cancelAction(ctx);
                        break;
                    case 'publish_raffle':
                        console.log(`üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ publish_raffle`);
                        await this.startPublishRaffle(ctx);
                        break;
                    case 'create_raffle_final':
                        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ create_raffle_final`);
                        await this.handleCreateRaffleFinal(ctx);
                        break;
                    default:
                        if (data.startsWith('publish_raffle_')) {
                            const raffleIndex = parseInt(data.replace('publish_raffle_', ''));
                            console.log(`üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ publish_raffle_${raffleIndex}`);
                            await this.publishRaffleToChannels(ctx, raffleIndex);
                        }
                        else if (data.startsWith('select_channel_')) {
                            const channelId = parseInt(data.replace('select_channel_', ''));
                            console.log(`üì∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ select_channel_${channelId}`);
                            await this.handleSelectChannel(ctx, channelId);
                        }
                        else {
                            console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: ${data}`);
                        }
                        break;
                }
            }
            catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ ${data}:`, error);
                await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
                    reply_markup: Keyboards.backToAdmin()
                });
            }
        });
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        this.bot.on('message:text', async (ctx) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            if (ctx.message?.text?.startsWith('/')) {
                console.log(`üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: ${ctx.message.text}`);
                return;
            }
            console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from.id}: "${ctx.message?.text}"`);
            const user = await this.userService.getUserByTelegramId(ctx.from.id);
            if (!user?.is_admin) {
                console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º`);
                return;
            }
            const state = this.adminStates[ctx.from.id];
            if (!state) {
                console.log(`üìù –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞`);
                return;
            }
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ ${ctx.from.id} —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:`, state);
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            await this.handleTextMessage(ctx, state);
        });
    }
    async handleTextMessage(ctx, state) {
        const text = ctx.message?.text;
        if (!text)
            return;
        console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: step=${state.step}, text=${text}`);
        switch (state.step) {
            case 'add_channel':
                console.log(`‚ûï –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞`);
                await this.handleAddChannel(ctx, text);
                break;
            case 'create_raffle_title':
                console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞`);
                await this.handleCreateRaffleTitle(ctx, text);
                break;
            case 'create_raffle_prize':
                console.log(`üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–∞`);
                await this.handleCreateRafflePrize(ctx, text);
                break;
            case 'create_raffle_winners':
                console.log(`üèÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π`);
                await this.handleCreateRaffleWinners(ctx, text);
                break;
            case 'create_raffle_duration':
                console.log(`‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞`);
                await this.handleCreateRaffleDuration(ctx, text);
                break;
            case 'create_mailing_text':
                console.log(`üì¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏`);
                await this.handleCreateMailingText(ctx, text);
                break;
            default:
                console.log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: ${state.step}`);
                break;
        }
    }
    async handleAddChannel(ctx, text) {
        try {
            console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: ${text}`);
            // –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
            let channelId = '';
            let inviteLink = '';
            if (text.startsWith('@')) {
                channelId = text;
                inviteLink = `https://t.me/${text.substring(1)}`;
            }
            else if (text.startsWith('https://t.me/')) {
                const username = text.replace('https://t.me/', '');
                channelId = `@${username}`;
                inviteLink = text;
            }
            else if (text.startsWith('t.me/')) {
                const username = text.replace('t.me/', '');
                channelId = `@${username}`;
                inviteLink = `https://t.me/${username}`;
            }
            else {
                await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @channel_name –∏–ª–∏ https://t.me/channel_name');
                return;
            }
            console.log(`üì∫ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: ID=${channelId}, Link=${inviteLink}`);
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            try {
                const chat = await this.bot.api.getChat(channelId);
                console.log(`üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:`, chat);
                try {
                    const channel = await this.channelService.createChannel(channelId, chat.title || chat.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª', inviteLink);
                    console.log(`‚úÖ –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –≤ –ë–î:`, channel);
                    await ctx.reply(`‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: ${channel.name}\nüîó –°—Å—ã–ª–∫–∞: \`${channel.invite_link}\``, {
                        parse_mode: 'Markdown',
                        reply_markup: Keyboards.backToAdmin()
                    });
                    delete this.adminStates[ctx.from.id];
                }
                catch (dbError) {
                    if (dbError.code === 'SQLITE_CONSTRAINT') {
                        console.log(`‚ö†Ô∏è –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${channelId}`);
                        await ctx.reply(`‚ö†Ô∏è –ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\nüì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: ${chat.title || chat.username}\nüîó –°—Å—ã–ª–∫–∞: \`${inviteLink}\``, {
                            parse_mode: 'Markdown',
                            reply_markup: Keyboards.backToAdmin()
                        });
                        delete this.adminStates[ctx.from.id];
                    }
                    else {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:`, dbError);
                        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
                    }
                }
            }
            catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ:`, error);
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.');
            }
        }
        catch (error) {
            console.error(`‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:`, error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.');
        }
        finally {
            // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
            if (!this.adminStates[ctx.from.id] || this.adminStates[ctx.from.id].step !== 'add_channel') {
                delete this.adminStates[ctx.from.id];
            }
        }
    }
    async handleCreateRaffleTitle(ctx, text) {
        this.adminStates[ctx.from.id] = {
            step: 'create_raffle_prize',
            tempData: { title: text }
        };
        await ctx.reply(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${text}\n\nüìù *–®–∞–≥ 2 –∏–∑ 5: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:`, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.cancelAction()
        });
    }
    async handleCreateRafflePrize(ctx, text) {
        this.adminStates[ctx.from.id] = {
            step: 'create_raffle_winners',
            tempData: {
                title: this.adminStates[ctx.from.id].tempData.title,
                prize: text
            }
        };
        await ctx.reply(`‚úÖ –ü—Ä–∏–∑: ${text}\n\nüìù *–®–∞–≥ 3 –∏–∑ 5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π*\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3, 5):`, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.cancelAction()
        });
    }
    async handleCreateRaffleWinners(ctx, text) {
        const winnersCount = parseInt(text);
        if (isNaN(winnersCount) || winnersCount < 1) {
            await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–º–∏–Ω–∏–º—É–º 1):');
            return;
        }
        this.adminStates[ctx.from.id] = {
            step: 'create_raffle_duration',
            tempData: {
                title: this.adminStates[ctx.from.id].tempData.title,
                prize: this.adminStates[ctx.from.id].tempData.prize,
                winnersCount
            }
        };
        await ctx.reply(`‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${winnersCount}\n\nüìù *–®–∞–≥ 4 –∏–∑ 5: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24 –¥–ª—è —Å—É—Ç–æ–∫):`, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.cancelAction()
        });
    }
    async handleCreateRaffleDuration(ctx, text) {
        const hours = parseInt(text);
        if (isNaN(hours) || hours < 1) {
            await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–º–∏–Ω–∏–º—É–º 1):');
            return;
        }
        const endDate = new Date();
        endDate.setHours(endDate.getHours() + hours);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–æ–≤
        this.adminStates[ctx.from.id] = {
            step: 'create_raffle_channels',
            tempData: {
                title: this.adminStates[ctx.from.id].tempData.title,
                prize: this.adminStates[ctx.from.id].tempData.prize,
                winnersCount: this.adminStates[ctx.from.id].tempData.winnersCount,
                endDate: endDate
            }
        };
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        const channels = await this.channelService.getAllChannels();
        if (channels.length === 0) {
            await ctx.reply(`‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${this.adminStates[ctx.from.id].tempData.title}\nüéÅ –ü—Ä–∏–∑: ${this.adminStates[ctx.from.id].tempData.prize}\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${this.adminStates[ctx.from.id].tempData.winnersCount}\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${hours} —á–∞—Å–æ–≤\n\n‚ùå *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤!*\n\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–Ω–æ–≤–æ.`, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
            delete this.adminStates[ctx.from.id];
            return;
        }
        let channelsText = `‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${this.adminStates[ctx.from.id].tempData.title}\nüéÅ –ü—Ä–∏–∑: ${this.adminStates[ctx.from.id].tempData.prize}\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${this.adminStates[ctx.from.id].tempData.winnersCount}\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${hours} —á–∞—Å–æ–≤\n\nüì∫ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:*\n\n`;
        channels.forEach((channel, index) => {
            channelsText += `${index + 1}. ${channel.name}\n`;
        });
        channelsText += `\nüí° *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n`;
        channelsText += `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞\n`;
        channelsText += `‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –æ—Ç–º–µ–Ω–∏—Ç –≤—ã–±–æ—Ä\n`;
        channelsText += `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "‚úÖ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`;
        const keyboard = new InlineKeyboard();
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        channels.forEach((channel, index) => {
            keyboard.text(`${index + 1}`, `select_channel_${channel.id}`);
            if ((index + 1) % 3 === 0)
                keyboard.row();
        });
        keyboard.row().text('‚úÖ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', 'create_raffle_final');
        keyboard.row().text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action');
        await ctx.reply(channelsText, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
    async handleSelectChannel(ctx, channelId) {
        const state = this.adminStates[ctx.from.id];
        if (!state || state.step !== 'create_raffle_channels') {
            await ctx.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            return;
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!state.tempData.selectedChannels) {
            state.tempData.selectedChannels = [];
        }
        const channelIndex = state.tempData.selectedChannels.indexOf(channelId);
        if (channelIndex === -1) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
            state.tempData.selectedChannels.push(channelId);
            await ctx.answerCallbackQuery('‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω');
        }
        else {
            // –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
            state.tempData.selectedChannels.splice(channelIndex, 1);
            await ctx.answerCallbackQuery('‚ùå –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω');
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        await this.updateChannelSelectionMessage(ctx);
    }
    async updateChannelSelectionMessage(ctx) {
        const state = this.adminStates[ctx.from.id];
        if (!state || state.step !== 'create_raffle_channels')
            return;
        const channels = await this.channelService.getAllChannels();
        const selectedChannels = state.tempData.selectedChannels || [];
        let text = `‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\nüìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${state.tempData.title}\nüéÅ –ü—Ä–∏–∑: ${state.tempData.prize}\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${state.tempData.winnersCount}\n‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round((state.tempData.endDate.getTime() - new Date().getTime()) / (1000 * 60 * 60))} —á–∞—Å–æ–≤\n\nüì∫ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:*\n\n`;
        channels.forEach((channel, index) => {
            const isSelected = selectedChannels.includes(channel.id);
            const status = isSelected ? '‚úÖ' : '‚ùå';
            text += `${index + 1}. ${status} ${channel.name}\n`;
        });
        text += `\nüí° *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n`;
        text += `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞\n`;
        text += `‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –æ—Ç–º–µ–Ω–∏—Ç –≤—ã–±–æ—Ä\n`;
        text += `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "‚úÖ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`;
        const keyboard = new InlineKeyboard();
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        channels.forEach((channel, index) => {
            keyboard.text(`${index + 1}`, `select_channel_${channel.id}`);
            if ((index + 1) % 3 === 0)
                keyboard.row();
        });
        keyboard.row().text('‚úÖ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', 'create_raffle_final');
        keyboard.row().text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_action');
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
    async handleCreateRaffleFinal(ctx) {
        const state = this.adminStates[ctx.from.id];
        if (!state || state.step !== 'create_raffle_channels') {
            await ctx.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            return;
        }
        const selectedChannels = state.tempData.selectedChannels || [];
        try {
            const raffle = await this.raffleService.createRaffle(state.tempData.prize, state.tempData.winnersCount, state.tempData.endDate, selectedChannels);
            const successText = `üéâ *–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*

üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${state.tempData.title}
üéÅ –ü—Ä–∏–∑: ${raffle.prize_description}
üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleString('ru-RU')}
üì∫ –ö–∞–Ω–∞–ª–æ–≤: ${selectedChannels.length}

üí° *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*
1. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"`;
            await ctx.editMessageText(successText, {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.', {
                reply_markup: Keyboards.backToAdmin()
            });
        }
        finally {
            delete this.adminStates[ctx.from.id];
        }
    }
    async handleCreateMailingText(ctx, text) {
        try {
            const mailing = await this.mailingService.createMailing(MailingType.ALL_USERS, text);
            await ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nüì¢ –¢–µ–∫—Å—Ç: ${mailing.message_text.substring(0, 100)}${mailing.message_text.length > 100 ? '...' : ''}`, { reply_markup: Keyboards.backToAdmin() });
        }
        catch (error) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.');
        }
        finally {
            delete this.adminStates[ctx.from.id];
        }
    }
    async cancelAction(ctx) {
        delete this.adminStates[ctx.from.id];
        await this.showMainAdminMenu(ctx);
    }
    async showMainAdminMenu(ctx) {
        await ctx.editMessageText('üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.mainAdmin()
        });
    }
    async showChannelsMenu(ctx) {
        await ctx.editMessageText('üì∫ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.channelsMenu()
        });
    }
    async showRafflesMenu(ctx) {
        await ctx.editMessageText('üéÅ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.rafflesMenu()
        });
    }
    async showMailingsMenu(ctx) {
        await ctx.editMessageText('üì¢ *–†–∞—Å—Å—ã–ª–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.mailingsMenu()
        });
    }
    async showStats(ctx) {
        const usersCount = await this.userService.getUsersCount();
        const allRaffles = await this.raffleService.getAllRaffles();
        const activeRaffles = allRaffles.filter(r => r.status === 'ACTIVE');
        const finishedRaffles = allRaffles.filter(r => r.status === 'FINISHED');
        const channels = await this.channelService.getAllChannels();
        const statsText = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount}
üì∫ –ö–∞–Ω–∞–ª–æ–≤-–ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: ${channels.length}

üéÅ –†–æ–∑—ã–≥—Ä—ã—à–∏:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: ${activeRaffles.length}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: ${finishedRaffles.length}
‚Ä¢ –í—Å–µ–≥–æ: ${allRaffles.length}

üì¢ –†–∞—Å—Å—ã–ª–∫–∏: –î–æ—Å—Ç—É–ø–Ω—ã`;
        await ctx.editMessageText(statsText, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async showSettings(ctx) {
        const settingsText = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*

üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ üéÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏
‚Ä¢ üì¢ –†–∞—Å—Å—ã–ª–∫–∏

üí° *–§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:*
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üõ†Ô∏è *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 1.0.0
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite
‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω`;
        await ctx.editMessageText(settingsText, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async startAddChannel(ctx) {
        console.log(`‚ûï –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);
        this.adminStates[ctx.from.id] = {
            step: 'add_channel',
            tempData: {}
        };
        console.log(`üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, this.adminStates[ctx.from.id]);
        await ctx.editMessageText('‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, @channel_name –∏–ª–∏ https://t.me/channel_name)', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.cancelAction()
        });
    }
    async showChannelsList(ctx) {
        const channels = await this.channelService.getAllChannels();
        if (channels.length === 0) {
            await ctx.editMessageText('üì∫ *–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤*\n\n–ö–∞–Ω–∞–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        let text = 'üì∫ *–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:*\n\n';
        channels.forEach((channel, index) => {
            text += `${index + 1}. *${channel.name}*\n`;
            text += `   \`${channel.invite_link}\`\n\n`;
        });
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async startCreateRaffle(ctx) {
        this.adminStates[ctx.from.id] = {
            step: 'create_raffle_title',
            tempData: {}
        };
        await ctx.editMessageText('üéÅ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞*\n\nüìù *–®–∞–≥ 1 –∏–∑ 5: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–†–æ–∑—ã–≥—Ä—ã—à iPhone 15"):', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.cancelAction()
        });
    }
    async showActiveRaffles(ctx) {
        const activeRaffles = await this.raffleService.getRafflesByStatus(RaffleStatus.ACTIVE);
        if (activeRaffles.length === 0) {
            await ctx.editMessageText('üéÅ *–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏*\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        let text = 'üéÅ *–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:*\n\n';
        activeRaffles.forEach((raffle, index) => {
            text += `${index + 1}. ${raffle.prize_description}\n`;
            text += `   –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}\n`;
            text += `   –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleString('ru-RU')}\n\n`;
        });
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async showFinishedRaffles(ctx) {
        const finishedRaffles = await this.raffleService.getRafflesByStatus(RaffleStatus.FINISHED);
        if (finishedRaffles.length === 0) {
            await ctx.editMessageText('‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏*\n\n–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        let text = '‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:*\n\n';
        finishedRaffles.slice(0, 10).forEach((raffle, index) => {
            text += `${index + 1}. ${raffle.prize_description}\n`;
            text += `   –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}\n`;
            text += `   –ó–∞–≤–µ—Ä—à–µ–Ω: ${raffle.end_date.toLocaleString('ru-RU')}\n\n`;
        });
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async startCreateMailing(ctx) {
        this.adminStates[ctx.from.id] = {
            step: 'create_mailing_text',
            tempData: {}
        };
        await ctx.editMessageText('üì¢ *–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:', {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.cancelAction()
        });
    }
    async showMailingsList(ctx) {
        const mailings = await this.mailingService.getAllMailings();
        if (mailings.length === 0) {
            await ctx.editMessageText('üì¢ *–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫*\n\n–†–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        let text = 'üì¢ *–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫:*\n\n';
        mailings.slice(0, 10).forEach((mailing, index) => {
            text += `${index + 1}. ${mailing.message_text.substring(0, 50)}...\n`;
            text += `   –°—Ç–∞—Ç—É—Å: ${mailing.status}\n`;
            text += `   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${mailing.sent_count}\n\n`;
        });
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
    async startPublishRaffle(ctx) {
        const activeRaffles = await this.raffleService.getActiveRafflesWithChannels();
        if (activeRaffles.length === 0) {
            await ctx.editMessageText('üéÅ *–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π*\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.', {
                parse_mode: 'Markdown',
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        let text = 'üéÅ *–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n';
        for (let i = 0; i < activeRaffles.length; i++) {
            const { raffle, channels } = activeRaffles[i];
            text += `${i + 1}. ${raffle.prize_description}\n`;
            text += `   –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: ${raffle.winners_count}\n`;
            text += `   –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${raffle.end_date.toLocaleString('ru-RU')}\n`;
            text += `   –ö–∞–Ω–∞–ª–æ–≤: ${channels.length}\n\n`;
        }
        await ctx.editMessageText(text, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.rafflesToPublish(activeRaffles.map((_, index) => index))
        });
    }
    async publishRaffleToChannels(ctx, raffleIndex) {
        const activeRaffles = await this.raffleService.getActiveRafflesWithChannels();
        const selectedRaffle = activeRaffles[raffleIndex];
        if (!selectedRaffle) {
            await ctx.editMessageText('‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }
        const { raffle, channels } = selectedRaffle;
        if (channels.length === 0) {
            await ctx.editMessageText('‚ùå –£ —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã.', {
                reply_markup: Keyboards.backToAdmin()
            });
            return;
        }
        let successCount = 0;
        let failCount = 0;
        for (const channel of channels) {
            try {
                const messageText = `üéâ *–†–û–ó–´–ì–†–´–®!*

üéÅ *–ü—Ä–∏–∑:* ${raffle.prize_description}
üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:* ${raffle.winners_count}
‚è∞ *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:* ${raffle.end_date.toLocaleString('ru-RU')}

üéØ *–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å" –Ω–∏–∂–µ
2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞

–£–¥–∞—á–∏! üçÄ`;
                await this.bot.api.sendMessage(channel.telegram_channel_id, messageText, {
                    parse_mode: 'Markdown',
                    reply_markup: Keyboards.participateInRaffle(raffle.id)
                });
                successCount++;
            }
            catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª ${channel.name}:`, error);
                failCount++;
            }
        }
        await ctx.editMessageText(`‚úÖ *–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n‚Ä¢ –û—à–∏–±–æ–∫: ${failCount}`, {
            parse_mode: 'Markdown',
            reply_markup: Keyboards.backToAdmin()
        });
    }
}
//# sourceMappingURL=adminHandlers.js.map