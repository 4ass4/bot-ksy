import dotenv from 'dotenv';
import { Bot } from 'grammy';
import Database from './database/database.js';
import { UserService } from './services/userService.js';
import { ChannelService } from './services/channelService.js';
import { RaffleService } from './services/raffleService.js';
import { MailingService } from './services/mailingService.js';
import { OfficialChannelService } from './services/officialChannelService.js';
import { BotSettingsService } from './services/botSettingsService.js';
import { ReferralService } from './services/referralService.js';
import { AnalyticsService } from './services/analyticsService.js';
import { SocialService } from './services/socialService.js';
import { SocialAccountService } from './services/socialAccountService.js';
import { UnifiedHandlers } from './bot/handlers/userHandlers.js';
import { Scheduler } from './bot/scheduler.js';
import migrate from './database/migrate.js';
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}
const DATABASE_PATH = process.env.DATABASE_PATH || './database/bot.db';
async function startBot() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π...');
        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        console.log('üì¶ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await migrate();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Ä–≤–∏—Å—ã
        const database = new Database(DATABASE_PATH);
        const userService = new UserService(database);
        const channelService = new ChannelService(database);
        const raffleService = new RaffleService(database);
        const mailingService = new MailingService(database);
        const officialChannelService = new OfficialChannelService(database);
        const botSettingsService = new BotSettingsService(database);
        const referralService = new ReferralService(database);
        const analyticsService = new AnalyticsService(database);
        const socialService = new SocialService(database);
        const socialAccountService = new SocialAccountService(database);
        // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        const bot = new Bot(BOT_TOKEN);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await bot.api.setMyCommands([
            { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
            { command: 'help', description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É' },
            { command: 'my_raffles', description: '–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏' },
            { command: 'admin', description: '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)' }
        ]);
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        const unifiedHandlers = new UnifiedHandlers(bot, userService, raffleService, channelService, mailingService, officialChannelService, botSettingsService, referralService, analyticsService, socialService, socialAccountService);
        unifiedHandlers.register();
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.catch((err) => {
            const ctx = err.ctx;
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`, err.error);
        });
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        const scheduler = new Scheduler(bot, raffleService, userService, mailingService);
        scheduler.start();
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.start();
        console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        process.once('SIGINT', async () => {
            console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
            await bot.stop();
            await database.close();
            process.exit(0);
        });
        process.once('SIGTERM', async () => {
            console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
            await bot.stop();
            await database.close();
            process.exit(0);
        });
    }
    catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}
// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();
//# sourceMappingURL=index.js.map